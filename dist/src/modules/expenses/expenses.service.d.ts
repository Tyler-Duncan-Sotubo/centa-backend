import { CreateExpenseDto } from './dto/create-expense.dto';
import { UpdateExpenseDto } from './dto/update-expense.dto';
import { db } from 'src/drizzle/types/drizzle';
import { AuditService } from '../audit/audit.service';
import { User } from 'src/common/types/user.type';
import { AwsService } from 'src/common/aws/aws.service';
import { ExpensesSettingsService } from './settings/expense-settings.service';
import { S3StorageService } from 'src/common/aws/s3-storage.service';
import { PusherService } from 'src/modules/notification/services/pusher.service';
import { CacheService } from 'src/common/cache/cache.service';
export declare class ExpensesService {
    private readonly db;
    private readonly auditService;
    private awsService;
    private readonly expenseSettingsService;
    private readonly awsStorage;
    private readonly pusher;
    private readonly cache;
    constructor(db: db, auditService: AuditService, awsService: AwsService, expenseSettingsService: ExpensesSettingsService, awsStorage: S3StorageService, pusher: PusherService, cache: CacheService);
    private tags;
    private exportAndUploadExcel;
    private exportAndUpload;
    handleExpenseApprovalFlow(expenseId: string, user: User): Promise<void>;
    create(dto: CreateExpenseDto, user: User): Promise<{
        status: string;
        date: string;
        id: string;
        createdAt: Date | null;
        updatedAt: Date | null;
        companyId: string;
        category: string;
        employeeId: string;
        submittedAt: Date | null;
        amount: string;
        rejectionReason: string | null;
        purpose: string;
        receiptUrl: string | null;
        paymentMethod: string | null;
        deletedAt: Date | null;
    }>;
    bulkCreateExpenses(companyId: string, rows: any[], user: User): Promise<{
        status: string;
        date: string;
        id: string;
        createdAt: Date | null;
        updatedAt: Date | null;
        companyId: string;
        category: string;
        employeeId: string;
        submittedAt: Date | null;
        amount: string;
        rejectionReason: string | null;
        purpose: string;
        receiptUrl: string | null;
        paymentMethod: string | null;
        deletedAt: Date | null;
    }[]>;
    update(id: string, dto: UpdateExpenseDto, user: User): Promise<{
        id: string;
        companyId: string;
        employeeId: string;
        date: string;
        category: string;
        purpose: string;
        amount: string;
        status: string;
        submittedAt: Date | null;
        receiptUrl: string | null;
        paymentMethod: string | null;
        rejectionReason: string | null;
        createdAt: Date | null;
        updatedAt: Date | null;
        deletedAt: Date | null;
    }>;
    checkApprovalStatus(expenseId: string, user?: User): Promise<{
        expenseDate: string;
        approvalStatus: string;
        steps: {
            fallbackRoles: string[];
            isUserEligible: boolean;
            isFallback: boolean;
            id: string;
            sequence: number;
            role: string;
            minApprovals: number;
            maxApprovals: number;
            createdAt: Date | null;
            status: string;
        }[];
    }>;
    handleExpenseApprovalAction(expenseId: string, user: User, action: 'approved' | 'rejected', remarks?: string): Promise<string>;
    remove(id: string, user: User): Promise<{
        success: boolean;
        id: string;
    }>;
    findAll(companyId: string): Promise<({
        id: string;
        date: string;
        submittedAt: Date | null;
        category: string;
        purpose: string;
        amount: string;
        status: string;
        paymentMethod: string | null;
        receiptUrl: string | null;
        requester: string;
        employeeId: string;
        approvedBy: string;
    } | {
        id: string;
        date: string;
        submittedAt: Date | null;
        category: string;
        purpose: string;
        amount: string;
        status: string;
        paymentMethod: string | null;
        receiptUrl: string | null;
        requester: string;
        employeeId: string;
        approvedBy: string;
    })[]>;
    findAllByEmployeeId(employeeId: string): Promise<{
        id: string;
        companyId: string;
        employeeId: string;
        date: string;
        category: string;
        purpose: string;
        amount: string;
        status: string;
        submittedAt: Date | null;
        receiptUrl: string | null;
        paymentMethod: string | null;
        rejectionReason: string | null;
        createdAt: Date | null;
        updatedAt: Date | null;
        deletedAt: Date | null;
    }[]>;
    findOne(id: string): Promise<{
        id: string;
        companyId: string;
        employeeId: string;
        date: string;
        category: string;
        purpose: string;
        amount: string;
        status: string;
        submittedAt: Date | null;
        receiptUrl: string | null;
        paymentMethod: string | null;
        rejectionReason: string | null;
        createdAt: Date | null;
        updatedAt: Date | null;
        deletedAt: Date | null;
    }>;
    generateReimbursementReport(companyId: string, filters?: {
        fromDate?: string;
        toDate?: string;
        employeeId?: string;
        status?: 'requested' | 'pending' | 'approved' | 'rejected' | 'all' | 'paid';
    }): Promise<({
        id: string;
        date: string;
        submittedAt: Date | null;
        category: string;
        purpose: string;
        amount: string;
        status: string;
        paymentMethod: string | null;
        receiptUrl: string | null;
        requester: string;
        employeeId: string;
        approvedBy: string;
        approvalDate: Date | null;
    } | {
        id: string;
        date: string;
        submittedAt: Date | null;
        category: string;
        purpose: string;
        amount: string;
        status: string;
        paymentMethod: string | null;
        receiptUrl: string | null;
        requester: string;
        employeeId: string;
        approvedBy: string;
        approvalDate: Date | null;
    })[]>;
    generateReimbursementReportToS3(companyId: string, format?: 'excel' | 'csv', filters?: {
        fromDate?: string;
        toDate?: string;
        employeeId?: string;
        status?: 'requested' | 'pending' | 'approved' | 'rejected' | 'paid' | 'all';
    }): Promise<{
        url: string;
        record: any;
    }>;
}
