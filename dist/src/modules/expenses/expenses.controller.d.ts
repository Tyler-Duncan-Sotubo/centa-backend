import { ExpensesService } from './expenses.service';
import { CreateExpenseDto } from './dto/create-expense.dto';
import { UpdateExpenseDto } from './dto/update-expense.dto';
import { User } from 'src/common/types/user.type';
import { BaseController } from 'src/common/interceptor/base.controller';
export declare class ExpensesController extends BaseController {
    private readonly expensesService;
    constructor(expensesService: ExpensesService);
    create(createExpenseDto: CreateExpenseDto, user: User): Promise<{
        date: string;
        id: string;
        createdAt: Date | null;
        updatedAt: Date | null;
        companyId: string;
        status: string;
        employeeId: string;
        submittedAt: Date | null;
        category: string;
        amount: string;
        purpose: string;
        receiptUrl: string | null;
        paymentMethod: string | null;
        rejectionReason: string | null;
        deletedAt: Date | null;
    }>;
    bulkCreate(rows: any[], user: User): Promise<{
        date: string;
        id: string;
        createdAt: Date | null;
        updatedAt: Date | null;
        companyId: string;
        status: string;
        employeeId: string;
        submittedAt: Date | null;
        category: string;
        amount: string;
        purpose: string;
        receiptUrl: string | null;
        paymentMethod: string | null;
        rejectionReason: string | null;
        deletedAt: Date | null;
    }[]>;
    findAll(user: User): Omit<import("drizzle-orm/pg-core").PgSelectBase<"expenses", {
        id: import("drizzle-orm/pg-core").PgColumn<{
            name: "id";
            tableName: "expenses";
            dataType: "string";
            columnType: "PgUUID";
            data: string;
            driverParam: string;
            notNull: true;
            hasDefault: true;
            isPrimaryKey: true;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: undefined;
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        date: import("drizzle-orm/pg-core").PgColumn<{
            name: "date";
            tableName: "expenses";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: true;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        submittedAt: import("drizzle-orm/pg-core").PgColumn<{
            name: "submitted_at";
            tableName: "expenses";
            dataType: "date";
            columnType: "PgTimestamp";
            data: Date;
            driverParam: string;
            notNull: false;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: undefined;
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        category: import("drizzle-orm/pg-core").PgColumn<{
            name: "category";
            tableName: "expenses";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: true;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        purpose: import("drizzle-orm/pg-core").PgColumn<{
            name: "purpose";
            tableName: "expenses";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: true;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        amount: import("drizzle-orm/pg-core").PgColumn<{
            name: "amount";
            tableName: "expenses";
            dataType: "string";
            columnType: "PgNumeric";
            data: string;
            driverParam: string;
            notNull: true;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: undefined;
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        status: import("drizzle-orm/pg-core").PgColumn<{
            name: "status";
            tableName: "expenses";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: true;
            hasDefault: true;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        paymentMethod: import("drizzle-orm/pg-core").PgColumn<{
            name: "payment_method";
            tableName: "expenses";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: false;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        receiptUrl: import("drizzle-orm/pg-core").PgColumn<{
            name: "receipt_url";
            tableName: "expenses";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: false;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        requester: import("drizzle-orm").SQL<string>;
        employeeId: import("drizzle-orm/pg-core").PgColumn<{
            name: "employee_id";
            tableName: "expenses";
            dataType: "string";
            columnType: "PgUUID";
            data: string;
            driverParam: string;
            notNull: true;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: undefined;
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        approvedBy: import("drizzle-orm").SQL<string>;
    }, "partial", ((Record<"expenses", "not-null"> | (Record<"expenses", "not-null"> & {
        [x: string]: "nullable";
    })) & {
        latest_approvals: "nullable";
    }) & {
        users: "nullable";
    }, false, "where" | "orderBy", ({
        id: string;
        date: string;
        submittedAt: Date | null;
        category: string;
        purpose: string;
        amount: string;
        status: string;
        paymentMethod: string | null;
        receiptUrl: string | null;
        requester: string;
        employeeId: string;
        approvedBy: string;
    } | {
        id: string;
        date: string;
        submittedAt: Date | null;
        category: string;
        purpose: string;
        amount: string;
        status: string;
        paymentMethod: string | null;
        receiptUrl: string | null;
        requester: string;
        employeeId: string;
        approvedBy: string;
    })[], {
        id: import("drizzle-orm/pg-core").PgColumn<{
            name: "id";
            tableName: "expenses";
            dataType: "string";
            columnType: "PgUUID";
            data: string;
            driverParam: string;
            notNull: true;
            hasDefault: true;
            isPrimaryKey: true;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: undefined;
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        date: import("drizzle-orm/pg-core").PgColumn<{
            name: "date";
            tableName: "expenses";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: true;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        submittedAt: import("drizzle-orm/pg-core").PgColumn<{
            name: "submitted_at";
            tableName: "expenses";
            dataType: "date";
            columnType: "PgTimestamp";
            data: Date;
            driverParam: string;
            notNull: false;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: undefined;
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        category: import("drizzle-orm/pg-core").PgColumn<{
            name: "category";
            tableName: "expenses";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: true;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        purpose: import("drizzle-orm/pg-core").PgColumn<{
            name: "purpose";
            tableName: "expenses";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: true;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        amount: import("drizzle-orm/pg-core").PgColumn<{
            name: "amount";
            tableName: "expenses";
            dataType: "string";
            columnType: "PgNumeric";
            data: string;
            driverParam: string;
            notNull: true;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: undefined;
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        status: import("drizzle-orm/pg-core").PgColumn<{
            name: "status";
            tableName: "expenses";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: true;
            hasDefault: true;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        paymentMethod: import("drizzle-orm/pg-core").PgColumn<{
            name: "payment_method";
            tableName: "expenses";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: false;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        receiptUrl: import("drizzle-orm/pg-core").PgColumn<{
            name: "receipt_url";
            tableName: "expenses";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: false;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        requester: import("drizzle-orm").DrizzleTypeError<"You cannot reference this field without assigning it an alias first - use `.as(<alias>)`">;
        employeeId: import("drizzle-orm/pg-core").PgColumn<{
            name: "employee_id";
            tableName: "expenses";
            dataType: "string";
            columnType: "PgUUID";
            data: string;
            driverParam: string;
            notNull: true;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: undefined;
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        approvedBy: import("drizzle-orm").DrizzleTypeError<"You cannot reference this field without assigning it an alias first - use `.as(<alias>)`">;
    }>, "where" | "orderBy">;
    findOne(id: string): Promise<{
        id: string;
        companyId: string;
        employeeId: string;
        date: string;
        category: string;
        purpose: string;
        amount: string;
        status: string;
        submittedAt: Date | null;
        receiptUrl: string | null;
        paymentMethod: string | null;
        rejectionReason: string | null;
        createdAt: Date | null;
        updatedAt: Date | null;
        deletedAt: Date | null;
    }>;
    findByEmployee(id: string): Promise<{
        id: string;
        companyId: string;
        employeeId: string;
        date: string;
        category: string;
        purpose: string;
        amount: string;
        status: string;
        submittedAt: Date | null;
        receiptUrl: string | null;
        paymentMethod: string | null;
        rejectionReason: string | null;
        createdAt: Date | null;
        updatedAt: Date | null;
        deletedAt: Date | null;
    }[]>;
    update(id: string, updateExpenseDto: UpdateExpenseDto, user: User): Promise<{
        id: string;
        companyId: string;
        employeeId: string;
        date: string;
        category: string;
        purpose: string;
        amount: string;
        status: string;
        submittedAt: Date | null;
        receiptUrl: string | null;
        paymentMethod: string | null;
        rejectionReason: string | null;
        createdAt: Date | null;
        updatedAt: Date | null;
        deletedAt: Date | null;
    }>;
    getApprovalStatus(id: string): Promise<{
        expenseDate: string;
        approvalStatus: string;
        steps: {
            fallbackRoles: string[];
            isUserEligible: boolean;
            isFallback: boolean;
            id: string;
            sequence: number;
            role: string;
            minApprovals: number;
            maxApprovals: number;
            createdAt: Date | null;
            status: string;
        }[];
    }>;
    approveExpense(id: string, action: 'approved' | 'rejected', remarks: string, user: User): Promise<string>;
    remove(id: string, user: User): Promise<{
        success: boolean;
        id: string;
    }>;
    getReimbursementReport(user: User, filters: any): Promise<({
        id: string;
        date: string;
        submittedAt: Date | null;
        category: string;
        purpose: string;
        amount: string;
        status: string;
        paymentMethod: string | null;
        receiptUrl: string | null;
        requester: string;
        employeeId: string;
        approvedBy: string;
        approvalDate: Date | null;
    } | {
        id: string;
        date: string;
        submittedAt: Date | null;
        category: string;
        purpose: string;
        amount: string;
        status: string;
        paymentMethod: string | null;
        receiptUrl: string | null;
        requester: string;
        employeeId: string;
        approvedBy: string;
        approvalDate: Date | null;
    })[]>;
    exportReimbursementReport(user: User, filters: any, format?: 'csv' | 'excel'): Promise<{
        url: {
            url: string;
            record: any;
        } | undefined;
    }>;
}
