import { CycleService } from './cycle.service';
import { CreateCycleDto } from './dto/create-cycle.dto';
import { UpdateCycleDto } from './dto/update-cycle.dto';
import { User } from 'src/common/types/user.type';
import { BaseController } from 'src/common/interceptor/base.controller';
export declare class CycleController extends BaseController {
    private readonly cycleService;
    constructor(cycleService: CycleService);
    create(createCycleDto: CreateCycleDto, user: User): Promise<{
        id: string;
        name: string;
        createdAt: Date | null;
        companyId: string;
        description: string | null;
        status: string | null;
        startDate: string;
        endDate: string;
        isAutoGenerated: boolean | null;
    }>;
    findAll(user: User): Promise<{
        id: string;
        companyId: string;
        name: string;
        description: string | null;
        startDate: string;
        endDate: string;
        status: string | null;
        createdAt: Date | null;
        isAutoGenerated: boolean | null;
    }[]>;
    findCurrent(user: User): Promise<{
        id: string;
        companyId: string;
        name: string;
        description: string | null;
        startDate: string;
        endDate: string;
        status: string | null;
        createdAt: Date | null;
        isAutoGenerated: boolean | null;
    }>;
    findOne(id: string): Promise<{
        id: string;
        companyId: string;
        name: string;
        description: string | null;
        startDate: string;
        endDate: string;
        status: string | null;
        createdAt: Date | null;
        isAutoGenerated: boolean | null;
    }>;
    update(id: string, updateCycleDto: UpdateCycleDto, user: User): Promise<{
        id: string;
        companyId: string;
        name: string;
        description: string | null;
        startDate: string;
        endDate: string;
        status: string | null;
        createdAt: Date | null;
        isAutoGenerated: boolean | null;
    }>;
    remove(id: string, user: User): Promise<void>;
}
