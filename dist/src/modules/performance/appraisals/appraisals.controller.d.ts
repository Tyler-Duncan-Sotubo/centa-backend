import { CreateAppraisalCycleDto } from './dto/create-appraisal-cycle.dto';
import { UpdateAppraisalCycleDto } from './dto/update-appraisal-cycle.dto';
import { AppraisalCycleService } from './appraisal-cycle.service';
import { AppraisalsService } from './appraisals.service';
import { User } from 'src/common/types/user.type';
import { BaseController } from 'src/common/interceptor/base.controller';
import { CreateAppraisalDto } from './dto/create-appraisal.dto';
import { UpdateAppraisalDto } from './dto/update-appraisal.dto';
import { AppraisalEntriesService } from './appraisal-entries.service';
import { UpsertEntryDto } from './dto/upsert-entry.dto';
export declare class AppraisalsController extends BaseController {
    private readonly appraisalsCycleService;
    private readonly appraisalsService;
    private readonly appraisalEntriesService;
    constructor(appraisalsCycleService: AppraisalCycleService, appraisalsService: AppraisalsService, appraisalEntriesService: AppraisalEntriesService);
    create(dto: CreateAppraisalCycleDto, user: User): Promise<{
        id: string;
        name: string;
        createdAt: Date | null;
        companyId: string | null;
        startDate: string;
        endDate: string;
        status: "active" | "upcoming" | "closed";
        isAutoGenerated: boolean | null;
    }>;
    findAll(user: User): Promise<{
        status: string;
        id: string;
        companyId: string | null;
        name: string;
        startDate: string;
        endDate: string;
        isAutoGenerated: boolean | null;
        createdAt: Date | null;
    }[]>;
    findOne(id: string, user: User): Promise<{
        id: string;
        companyId: string | null;
        name: string;
        startDate: string;
        endDate: string;
        status: "active" | "upcoming" | "closed";
        isAutoGenerated: boolean | null;
        createdAt: Date | null;
    }>;
    findCurrent(user: User): Promise<{
        id: string;
        companyId: string | null;
        name: string;
        startDate: string;
        endDate: string;
        status: "active" | "upcoming" | "closed";
        isAutoGenerated: boolean | null;
        createdAt: Date | null;
    }>;
    update(id: string, updateDto: UpdateAppraisalCycleDto, user: User): Promise<{
        id: string;
        companyId: string | null;
        name: string;
        startDate: string;
        endDate: string;
        status: "active" | "upcoming" | "closed";
        isAutoGenerated: boolean | null;
        createdAt: Date | null;
    }>;
    remove(id: string, user: User): Promise<{
        message: string;
    }>;
    createAppraisal(createDto: CreateAppraisalDto, user: User): Promise<{
        id: string;
        createdAt: Date | null;
        companyId: string | null;
        managerId: string;
        employeeId: string;
        cycleId: string;
        finalScore: number | null;
        promotionRecommendation: "promote" | "hold" | "exit" | null;
        submittedByEmployee: boolean | null;
        submittedByManager: boolean | null;
        finalized: boolean | null;
        finalNote: string | null;
    }>;
    findAllAppraisals(cycleId: string, user: User): Promise<({
        id: string;
        employeeName: string;
        managerName: string;
        submittedByEmployee: boolean | null;
        submittedByManager: boolean | null;
        finalized: boolean | null;
        finalScore: number | null;
        departmentName: any;
        jobRoleName: string | null;
    } | {
        id: string;
        employeeName: string;
        managerName: string;
        submittedByEmployee: boolean | null;
        submittedByManager: boolean | null;
        finalized: boolean | null;
        finalScore: number | null;
        departmentName: any;
        jobRoleName: string | null;
    })[]>;
    updateManager(appraisalId: string, body: {
        managerId: string;
    }, user: User): Promise<{
        id: string;
        companyId: string | null;
        cycleId: string;
        employeeId: string;
        managerId: string;
        submittedByEmployee: boolean | null;
        submittedByManager: boolean | null;
        finalized: boolean | null;
        finalScore: number | null;
        promotionRecommendation: "promote" | "hold" | "exit" | null;
        finalNote: string | null;
        createdAt: Date | null;
    }>;
    findOneAppraisal(id: string, user: User): Promise<{
        id: string;
        cycleId: string;
        employeeName: string;
        managerName: string;
        submittedByEmployee: boolean | null;
        submittedByManager: boolean | null;
        finalized: boolean | null;
        recommendation: "promote" | "hold" | "exit" | null;
        finalNote: string | null;
        finalScore: number | null;
        departmentName: any;
        jobRoleName: string | null;
    } | {
        id: string;
        cycleId: string;
        employeeName: string;
        managerName: string;
        submittedByEmployee: boolean | null;
        submittedByManager: boolean | null;
        finalized: boolean | null;
        recommendation: "promote" | "hold" | "exit" | null;
        finalNote: string | null;
        finalScore: number | null;
        departmentName: any;
        jobRoleName: string | null;
    }>;
    updateAppraisal(id: string, updateDto: UpdateAppraisalDto, user: User): Promise<{
        id: string;
        companyId: string | null;
        cycleId: string;
        employeeId: string;
        managerId: string;
        submittedByEmployee: boolean | null;
        submittedByManager: boolean | null;
        finalized: boolean | null;
        finalScore: number | null;
        promotionRecommendation: "promote" | "hold" | "exit" | null;
        finalNote: string | null;
        createdAt: Date | null;
    }>;
    removeAppraisal(id: string, user: User): Promise<{
        message: string;
    }>;
    getEntries(appraisalId: string): Promise<{
        competencyId: string;
        competencyName: string;
        expectedLevelId: string;
        expectedLevelName: string;
        employeeLevelId: string | null;
        employeeLevelName: string | null;
        managerLevelId: string | null;
        managerLevelName: string | null;
        notes: string;
    }[]>;
    upsertEntries(appraisalId: string, entries: UpsertEntryDto[], user: User): Promise<{
        message: string;
        count: number;
        results: {
            message: string;
            data: any;
        }[];
    }>;
    restartAppraisal(appraisalId: string, user: User): Promise<{
        message: string;
    }>;
}
