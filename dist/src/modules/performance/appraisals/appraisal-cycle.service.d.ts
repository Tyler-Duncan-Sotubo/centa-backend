import { db } from 'src/drizzle/types/drizzle';
import { AuditService } from 'src/modules/audit/audit.service';
import { User } from 'src/common/types/user.type';
import { CreateAppraisalCycleDto } from './dto/create-appraisal-cycle.dto';
import { UpdateAppraisalCycleDto } from './dto/update-appraisal-cycle.dto';
export declare class AppraisalCycleService {
    private readonly db;
    private readonly auditService;
    constructor(db: db, auditService: AuditService);
    create(createDto: CreateAppraisalCycleDto, companyId: string, userId?: string): Promise<{
        id: string;
        name: string;
        createdAt: Date | null;
        companyId: string | null;
        status: "closed" | "active" | "upcoming";
        startDate: string;
        endDate: string;
        isAutoGenerated: boolean | null;
    }>;
    findAll(companyId: string): Promise<{
        status: string;
        id: string;
        companyId: string | null;
        name: string;
        startDate: string;
        endDate: string;
        isAutoGenerated: boolean | null;
        createdAt: Date | null;
    }[]>;
    getLastCycle(companyId: string): Promise<{
        id: string;
        companyId: string | null;
        name: string;
        startDate: string;
        endDate: string;
        status: "closed" | "active" | "upcoming";
        isAutoGenerated: boolean | null;
        createdAt: Date | null;
    }>;
    findCurrent(companyId: string): Promise<{
        id: string;
        companyId: string | null;
        name: string;
        startDate: string;
        endDate: string;
        status: "closed" | "active" | "upcoming";
        isAutoGenerated: boolean | null;
        createdAt: Date | null;
    }>;
    findOne(id: string, companyId: string): Promise<{
        id: string;
        companyId: string | null;
        name: string;
        startDate: string;
        endDate: string;
        status: "closed" | "active" | "upcoming";
        isAutoGenerated: boolean | null;
        createdAt: Date | null;
    }>;
    getLast(companyId: string): Promise<{
        id: string;
        companyId: string | null;
        name: string;
        startDate: string;
        endDate: string;
        status: "closed" | "active" | "upcoming";
        isAutoGenerated: boolean | null;
        createdAt: Date | null;
    }>;
    update(id: string, updateDto: UpdateAppraisalCycleDto, user: User): Promise<{
        id: string;
        companyId: string | null;
        name: string;
        startDate: string;
        endDate: string;
        status: "closed" | "active" | "upcoming";
        isAutoGenerated: boolean | null;
        createdAt: Date | null;
    }>;
    remove(id: string, user: User): Promise<{
        message: string;
    }>;
}
