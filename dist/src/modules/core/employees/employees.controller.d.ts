import { EmployeesService } from './employees.service';
import { User } from 'src/common/types/user.type';
import { BaseController } from 'src/common/interceptor/base.controller';
import { CreateEmployeeCoreDto } from './dto/create-employee-core.dto';
import { FastifyReply } from 'fastify';
import { SearchEmployeesDto } from './dto/search-employees.dto';
import { CreateEmployeeMultiDetailsDto } from './dto/create-employee-multi-details.dto';
import { EmployeeProfileDto } from './dto/update-employee-details.dto';
export declare class EmployeesController extends BaseController {
    private readonly employeesService;
    constructor(employeesService: EmployeesService);
    downloadTemplate(reply: FastifyReply): Promise<void>;
    bulkCreate(rows: any[], user: User): Promise<{
        successCount: number;
        failedCount: number;
        failedRows: any[];
        created: {
            id: string;
            employeeNumber: string;
            email: string;
        }[];
    }>;
    createEmployeeNumber(user: User): Promise<string>;
    create(createEmployeeDto: CreateEmployeeCoreDto, user: User): Promise<{
        id: string;
        employeeNumber: string;
        email: string;
        firstName: string;
    }>;
    createEmployee(createEmployeeDto: CreateEmployeeMultiDetailsDto, user: User, employeeId: string): Promise<string>;
    findAllEmployees(user: User): Promise<({
        id: string;
        firstName: string;
        lastName: string;
        employeeNumber: string;
        email: string;
        departmentId: string | null;
        department: any;
        employmentStatus: "probation" | "active" | "on_leave" | "resigned" | "terminated" | "onboarding";
        jobRole: string | null;
        costCenter: string | null;
        location: string | null;
        annualGross: number | null;
        groupId: string | null;
        applyNHf: boolean | null;
    } | {
        id: string;
        firstName: string;
        lastName: string;
        employeeNumber: string;
        email: string;
        departmentId: string | null;
        department: any;
        employmentStatus: "probation" | "active" | "on_leave" | "resigned" | "terminated" | "onboarding";
        jobRole: string | null;
        costCenter: string | null;
        location: string | null;
        annualGross: number | null;
        groupId: string | null;
        applyNHf: boolean | null;
    })[]>;
    findAllCompanyEmployees(user: User): Promise<({
        id: string;
        firstName: string;
        lastName: string;
        employeeNumber: string;
        email: string;
        departmentId: string | null;
        department: any;
        employmentStatus: "probation" | "active" | "on_leave" | "resigned" | "terminated" | "onboarding";
        jobRole: string | null;
        costCenter: string | null;
        location: string | null;
        annualGross: number | null;
        groupId: string | null;
        applyNHf: boolean | null;
    } | {
        id: string;
        firstName: string;
        lastName: string;
        employeeNumber: string;
        email: string;
        departmentId: string | null;
        department: any;
        employmentStatus: "probation" | "active" | "on_leave" | "resigned" | "terminated" | "onboarding";
        jobRole: string | null;
        costCenter: string | null;
        location: string | null;
        annualGross: number | null;
        groupId: string | null;
        applyNHf: boolean | null;
    })[]>;
    getActiveEmployees(user: User): Promise<{
        employeeManager: {
            id: string;
            name: string;
            email: string;
        };
        first_name: string;
        last_name: string;
        avatar: string | null;
        userId: string;
        email: string;
        group_id: string | null;
        companyId: string;
        id: string;
        company_name: string;
        start_date: string;
        department_name: any;
        job_role: string | null;
        employee_number: string;
        managerId: string | null;
        location: string | null;
    } | {
        employeeManager: {
            id: string;
            name: string;
            email: string;
        };
        first_name: string;
        last_name: string;
        avatar: string | null;
        userId: string;
        email: string;
        group_id: string | null;
        companyId: string;
        id: string;
        company_name: string;
        start_date: string;
        department_name: any;
        job_role: string | null;
        employee_number: string;
        managerId: string | null;
        location: string | null;
    }>;
    getEmployeeSalary(user: User, employeeId: string): Promise<{
        companyAllowance: {
            basicPercent: number;
            housingPercent: number;
            transportPercent: number;
            allowanceOthers: {
                type: string;
                percentage?: number;
                fixedAmount?: number;
            }[];
        };
        compensations: {
            id: string;
            employeeId: string;
            grossSalary: number;
            payGroupId: any;
            applyNhf: boolean;
            startDate: any;
            endDate: any;
        } | {
            id: string;
            employeeId: string;
            grossSalary: number;
            payGroupId: any;
            applyNhf: boolean;
            startDate: any;
            endDate: any;
        };
    }>;
    employeeFinanceDetails(employeeId: string): Promise<{}>;
    findAll(user: User, id: string): Promise<{
        core: {
            employeeManager: {
                id: string;
                firstName: string;
                lastName: string;
                email: string;
                avatarUrl: string;
            };
            id: string;
            firstName: string;
            lastName: string;
            employeeNumber: string;
            email: string;
            employmentStatus: "probation" | "active" | "on_leave" | "resigned" | "terminated" | "onboarding";
            probationEndDate: string;
            departmentId: string | null;
            department: any;
            jobRoleId: string | null;
            jobRole: string | null;
            costCenter: string | null;
            costCenterId: string | null;
            location: string | null;
            payGroupId: string | null;
            locationId: string | null;
            payGroup: string | null;
            managerId: string | null;
            avatarUrl: string | null;
            effectiveDate: string;
            companyRoleId: string;
            role: string;
            confirmed: boolean | null;
        } | {
            employeeManager: {
                id: string;
                firstName: string;
                lastName: string;
                email: string;
                avatarUrl: string;
            };
            id: string;
            firstName: string;
            lastName: string;
            employeeNumber: string;
            email: string;
            employmentStatus: "probation" | "active" | "on_leave" | "resigned" | "terminated" | "onboarding";
            probationEndDate: string;
            departmentId: string | null;
            department: any;
            jobRoleId: string | null;
            jobRole: string | null;
            costCenter: string | null;
            costCenterId: string | null;
            location: string | null;
            payGroupId: string | null;
            locationId: string | null;
            payGroup: string | null;
            managerId: string | null;
            avatarUrl: string | null;
            effectiveDate: string;
            companyRoleId: string;
            role: string;
            confirmed: boolean | null;
        } | null;
        profile: {} | null;
        history: {
            id: string;
            employeeId: string;
            type: "employment" | "education" | "certification" | "promotion" | "transfer" | "termination";
            title: string;
            startDate: string | null;
            endDate: string | null;
            institution: string | null;
            description: string | null;
            createdAt: Date;
        }[] | null;
        dependents: {
            id: string;
            employeeId: string;
            name: string;
            relationship: string;
            dateOfBirth: string;
            isBeneficiary: boolean | null;
            createdAt: Date;
        }[] | null;
        certifications: {
            id: string;
            employeeId: string;
            name: string;
            authority: string | null;
            licenseNumber: string | null;
            issueDate: string | null;
            expiryDate: string | null;
            documentUrl: string | null;
            createdAt: Date;
        }[] | null;
        compensation: {
            id: string;
            employeeId: string;
            grossSalary: number;
            payGroupId: any;
            applyNhf: boolean;
            startDate: any;
            endDate: any;
        } | {
            id: string;
            employeeId: string;
            grossSalary: number;
            payGroupId: any;
            applyNhf: boolean;
            startDate: any;
            endDate: any;
        } | null;
        finance: {} | null;
        leaveBalance: {
            leaveTypeId: string;
            leaveTypeName: string;
            year: number;
            entitlement: string;
            used: string;
            balance: string;
        }[] | null;
        leaveRequests: {
            requestId: string;
            employeeId: string;
            leaveType: string;
            startDate: string;
            endDate: string;
            status: string;
            reason: string | null;
        }[] | null;
        attendance: {
            summaryList: Array<{
                date: string;
                checkInTime: string | null;
                checkOutTime: string | null;
                status: "absent" | "present" | "late";
            }>;
        } | null;
        payslipSummary: {
            payslip_id: string;
            payroll_date: string;
            gross_salary: string;
            net_salary: string;
            totalDeduction: string;
            taxableIncome: string;
            paye: string;
            pensionContribution: string;
            nhfContribution: string | null;
            salaryAdvance: string | null;
            payslip_pdf_url: string | null;
            paymentStatus: string | null;
            basic: string;
            housing: string;
            transport: string;
            voluntaryDeductions: unknown;
        }[] | null;
    }>;
    findOne(id: string, user: User): Promise<{
        employeeManager: {
            id: string;
            firstName: string;
            lastName: string;
            email: string;
            avatarUrl: string;
        };
        id: string;
        firstName: string;
        lastName: string;
        employeeNumber: string;
        email: string;
        employmentStatus: "probation" | "active" | "on_leave" | "resigned" | "terminated" | "onboarding";
        probationEndDate: string;
        departmentId: string | null;
        department: any;
        jobRoleId: string | null;
        jobRole: string | null;
        costCenter: string | null;
        costCenterId: string | null;
        location: string | null;
        payGroupId: string | null;
        locationId: string | null;
        payGroup: string | null;
        managerId: string | null;
        avatarUrl: string | null;
        effectiveDate: string;
        companyRoleId: string;
        role: string;
        confirmed: boolean | null;
    } | {
        employeeManager: {
            id: string;
            firstName: string;
            lastName: string;
            email: string;
            avatarUrl: string;
        };
        id: string;
        firstName: string;
        lastName: string;
        employeeNumber: string;
        email: string;
        employmentStatus: "probation" | "active" | "on_leave" | "resigned" | "terminated" | "onboarding";
        probationEndDate: string;
        departmentId: string | null;
        department: any;
        jobRoleId: string | null;
        jobRole: string | null;
        costCenter: string | null;
        costCenterId: string | null;
        location: string | null;
        payGroupId: string | null;
        locationId: string | null;
        payGroup: string | null;
        managerId: string | null;
        avatarUrl: string | null;
        effectiveDate: string;
        companyRoleId: string;
        role: string;
        confirmed: boolean | null;
    }>;
    update(id: string, dto: EmployeeProfileDto, user: User, ip: string): Promise<{
        id: string;
        employeeNumber: string;
        userId: string;
        departmentId: string | null;
        jobRoleId: string | null;
        managerId: string | null;
        costCenterId: string | null;
        locationId: string | null;
        payGroupId: string | null;
        employmentStatus: "probation" | "active" | "on_leave" | "resigned" | "terminated" | "onboarding";
        employmentStartDate: string;
        employmentEndDate: Date | null;
        confirmed: boolean | null;
        probationEndDate: string;
        firstName: string;
        lastName: string;
        email: string;
        createdAt: Date;
        updatedAt: Date;
        companyId: string;
    } | undefined>;
    remove(id: string): Promise<{
        deleted: boolean;
        id: string;
    }>;
    findAllManagers(user: User): Promise<{
        id: string;
        name: string;
    }[]>;
    updateManagerId(id: string, managerId: string): Promise<{
        id: string;
        employeeNumber: string;
        userId: string;
        departmentId: string | null;
        jobRoleId: string | null;
        managerId: string | null;
        costCenterId: string | null;
        locationId: string | null;
        payGroupId: string | null;
        employmentStatus: "probation" | "active" | "on_leave" | "resigned" | "terminated" | "onboarding";
        employmentStartDate: string;
        employmentEndDate: Date | null;
        confirmed: boolean | null;
        probationEndDate: string;
        firstName: string;
        lastName: string;
        email: string;
        createdAt: Date;
        updatedAt: Date;
        companyId: string;
    }>;
    removeManagerId(id: string): Promise<{
        id: string;
        employeeNumber: string;
        userId: string;
        departmentId: string | null;
        jobRoleId: string | null;
        managerId: string | null;
        costCenterId: string | null;
        locationId: string | null;
        payGroupId: string | null;
        employmentStatus: "probation" | "active" | "on_leave" | "resigned" | "terminated" | "onboarding";
        employmentStartDate: string;
        employmentEndDate: Date | null;
        confirmed: boolean | null;
        probationEndDate: string;
        firstName: string;
        lastName: string;
        email: string;
        createdAt: Date;
        updatedAt: Date;
        companyId: string;
    }>;
    getFallbackManagers(user: User): Promise<{
        id: string;
        name: string;
        role: string;
        email: string;
    }[]>;
    search(params: SearchEmployeesDto): Promise<({
        id: string;
        employeeNumber: string;
        firstName: string;
        lastName: string;
        email: string;
        employmentStatus: "probation" | "active" | "on_leave" | "resigned" | "terminated" | "onboarding";
        departmentName: any;
        jobRoleTitle: string | null;
        costCenterName: string | null;
        locationName: string | null;
    } | {
        id: string;
        employeeNumber: string;
        firstName: string;
        lastName: string;
        email: string;
        employmentStatus: "probation" | "active" | "on_leave" | "resigned" | "terminated" | "onboarding";
        departmentName: any;
        jobRoleTitle: string | null;
        costCenterName: string | null;
        locationName: string | null;
    })[]>;
}
