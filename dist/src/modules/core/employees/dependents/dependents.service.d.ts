import { CreateDependentDto } from './dto/create-dependent.dto';
import { db } from 'src/drizzle/types/drizzle';
import { AuditService } from 'src/modules/audit/audit.service';
import { UpdateDependentDto } from './dto/update-dependent.dto';
export declare class DependentsService {
    private readonly db;
    private readonly auditService;
    protected table: import("drizzle-orm/pg-core").PgTableWithColumns<{
        name: "employee_dependents";
        schema: undefined;
        columns: {
            id: import("drizzle-orm/pg-core").PgColumn<{
                name: "id";
                tableName: "employee_dependents";
                dataType: "string";
                columnType: "PgUUID";
                data: string;
                driverParam: string;
                notNull: true;
                hasDefault: true;
                isPrimaryKey: true;
                isAutoincrement: false;
                hasRuntimeDefault: false;
                enumValues: undefined;
                baseColumn: never;
                identity: undefined;
                generated: undefined;
            }, {}, {}>;
            employeeId: import("drizzle-orm/pg-core").PgColumn<{
                name: "employee_id";
                tableName: "employee_dependents";
                dataType: "string";
                columnType: "PgUUID";
                data: string;
                driverParam: string;
                notNull: true;
                hasDefault: false;
                isPrimaryKey: false;
                isAutoincrement: false;
                hasRuntimeDefault: false;
                enumValues: undefined;
                baseColumn: never;
                identity: undefined;
                generated: undefined;
            }, {}, {}>;
            name: import("drizzle-orm/pg-core").PgColumn<{
                name: "name";
                tableName: "employee_dependents";
                dataType: "string";
                columnType: "PgText";
                data: string;
                driverParam: string;
                notNull: true;
                hasDefault: false;
                isPrimaryKey: false;
                isAutoincrement: false;
                hasRuntimeDefault: false;
                enumValues: [string, ...string[]];
                baseColumn: never;
                identity: undefined;
                generated: undefined;
            }, {}, {}>;
            relationship: import("drizzle-orm/pg-core").PgColumn<{
                name: "relationship";
                tableName: "employee_dependents";
                dataType: "string";
                columnType: "PgText";
                data: string;
                driverParam: string;
                notNull: true;
                hasDefault: false;
                isPrimaryKey: false;
                isAutoincrement: false;
                hasRuntimeDefault: false;
                enumValues: [string, ...string[]];
                baseColumn: never;
                identity: undefined;
                generated: undefined;
            }, {}, {}>;
            dateOfBirth: import("drizzle-orm/pg-core").PgColumn<{
                name: "date_of_birth";
                tableName: "employee_dependents";
                dataType: "string";
                columnType: "PgDateString";
                data: string;
                driverParam: string;
                notNull: true;
                hasDefault: false;
                isPrimaryKey: false;
                isAutoincrement: false;
                hasRuntimeDefault: false;
                enumValues: undefined;
                baseColumn: never;
                identity: undefined;
                generated: undefined;
            }, {}, {}>;
            isBeneficiary: import("drizzle-orm/pg-core").PgColumn<{
                name: "is_beneficiary";
                tableName: "employee_dependents";
                dataType: "boolean";
                columnType: "PgBoolean";
                data: boolean;
                driverParam: boolean;
                notNull: false;
                hasDefault: true;
                isPrimaryKey: false;
                isAutoincrement: false;
                hasRuntimeDefault: false;
                enumValues: undefined;
                baseColumn: never;
                identity: undefined;
                generated: undefined;
            }, {}, {}>;
            createdAt: import("drizzle-orm/pg-core").PgColumn<{
                name: "created_at";
                tableName: "employee_dependents";
                dataType: "date";
                columnType: "PgTimestamp";
                data: Date;
                driverParam: string;
                notNull: true;
                hasDefault: true;
                isPrimaryKey: false;
                isAutoincrement: false;
                hasRuntimeDefault: false;
                enumValues: undefined;
                baseColumn: never;
                identity: undefined;
                generated: undefined;
            }, {}, {}>;
        };
        dialect: "pg";
    }>;
    constructor(db: db, auditService: AuditService);
    create(employeeId: string, dto: CreateDependentDto, userId: string, ip: string): Promise<{
        name: string;
        id: string;
        createdAt: Date;
        employeeId: string;
        dateOfBirth: string;
        relationship: string;
        isBeneficiary: boolean | null;
    }>;
    findAll(employeeId: string): Promise<{
        id: string;
        employeeId: string;
        name: string;
        relationship: string;
        dateOfBirth: string;
        isBeneficiary: boolean | null;
        createdAt: Date;
    }[]>;
    findOne(dependentId: string): Promise<{}>;
    update(dependentId: string, dto: UpdateDependentDto, userId: string, ip: string): Promise<{
        id: string;
        employeeId: string;
        name: string;
        relationship: string;
        dateOfBirth: string;
        isBeneficiary: boolean | null;
        createdAt: Date;
    }>;
    remove(dependentId: string): Promise<{
        deleted: boolean;
        id: string;
    }>;
}
