import { LocationsService } from './locations.service';
import { CreateLocationDto } from './dto/create-location.dto';
import { UpdateLocationDto } from './dto/update-location.dto';
import { User } from 'src/common/types/user.type';
import { BaseController } from 'src/common/interceptor/base.controller';
export declare class LocationsController extends BaseController {
    private readonly locationsService;
    constructor(locationsService: LocationsService);
    create(createLocationDto: CreateLocationDto, user: User, ip: string): Promise<{
        id: string;
        name: string;
        createdAt: Date;
        updatedAt: Date;
        isActive: boolean | null;
        country: string | null;
        companyId: string;
        isPrimary: boolean | null;
        street: string | null;
        city: string | null;
        state: string | null;
        postalCode: string | null;
        timeZone: string | null;
        locale: string;
        latitude: number | null;
        longitude: number | null;
    }>;
    findAll(user: User): Promise<{
        id: string;
        companyId: string;
        isPrimary: boolean | null;
        name: string;
        street: string | null;
        city: string | null;
        state: string | null;
        country: string | null;
        postalCode: string | null;
        timeZone: string | null;
        locale: string;
        latitude: number | null;
        longitude: number | null;
        isActive: boolean | null;
        createdAt: Date;
        updatedAt: Date;
    }[]>;
    findOne(id: string): Promise<{
        id: string;
        companyId: string;
        isPrimary: boolean | null;
        name: string;
        street: string | null;
        city: string | null;
        state: string | null;
        country: string | null;
        postalCode: string | null;
        timeZone: string | null;
        locale: string;
        latitude: number | null;
        longitude: number | null;
        isActive: boolean | null;
        createdAt: Date;
        updatedAt: Date;
    }>;
    update(id: string, updateLocationDto: UpdateLocationDto, user: User, ip: string): Promise<{
        id: string;
        companyId: string;
        isPrimary: boolean | null;
        name: string;
        street: string | null;
        city: string | null;
        state: string | null;
        country: string | null;
        postalCode: string | null;
        timeZone: string | null;
        locale: string;
        latitude: number | null;
        longitude: number | null;
        isActive: boolean | null;
        createdAt: Date;
        updatedAt: Date;
    }>;
    remove(id: string): Promise<{
        id: string;
        companyId: string;
        isPrimary: boolean | null;
        name: string;
        street: string | null;
        city: string | null;
        state: string | null;
        country: string | null;
        postalCode: string | null;
        timeZone: string | null;
        locale: string;
        latitude: number | null;
        longitude: number | null;
        isActive: boolean | null;
        createdAt: Date;
        updatedAt: Date;
    }>;
    findLocationManagers(id: string): Promise<({
        locationId: string;
        managerId: string;
        name: any;
        email: any;
    } | {
        locationId: string;
        managerId: string;
        name: any;
        email: any;
    })[]>;
    addLocationManager(id: string, employeeId: string): Promise<{
        id: string;
        createdAt: Date;
        managerId: string;
        locationId: string;
    }[]>;
    updateLocationManager(id: string, employeeId: string): Promise<{
        id: string;
        createdAt: Date;
        managerId: string;
        locationId: string;
    }[]>;
}
