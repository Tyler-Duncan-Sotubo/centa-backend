import { CreateLocationDto } from './dto/create-location.dto';
import { UpdateLocationDto } from './dto/update-location.dto';
import { AuditService } from 'src/modules/audit/audit.service';
import { db } from 'src/drizzle/types/drizzle';
import { User } from 'src/common/types/user.type';
import { CompanySettingsService } from 'src/company-settings/company-settings.service';
export declare class LocationsService {
    private readonly db;
    private readonly audit;
    private readonly companySettings;
    protected table: import("drizzle-orm/pg-core").PgTableWithColumns<{
        name: "company_locations";
        schema: undefined;
        columns: {
            id: import("drizzle-orm/pg-core").PgColumn<{
                name: "id";
                tableName: "company_locations";
                dataType: "string";
                columnType: "PgUUID";
                data: string;
                driverParam: string;
                notNull: true;
                hasDefault: true;
                isPrimaryKey: true;
                isAutoincrement: false;
                hasRuntimeDefault: false;
                enumValues: undefined;
                baseColumn: never;
                identity: undefined;
                generated: undefined;
            }, {}, {}>;
            companyId: import("drizzle-orm/pg-core").PgColumn<{
                name: "company_id";
                tableName: "company_locations";
                dataType: "string";
                columnType: "PgUUID";
                data: string;
                driverParam: string;
                notNull: true;
                hasDefault: false;
                isPrimaryKey: false;
                isAutoincrement: false;
                hasRuntimeDefault: false;
                enumValues: undefined;
                baseColumn: never;
                identity: undefined;
                generated: undefined;
            }, {}, {}>;
            isPrimary: import("drizzle-orm/pg-core").PgColumn<{
                name: "is_primary";
                tableName: "company_locations";
                dataType: "boolean";
                columnType: "PgBoolean";
                data: boolean;
                driverParam: boolean;
                notNull: false;
                hasDefault: true;
                isPrimaryKey: false;
                isAutoincrement: false;
                hasRuntimeDefault: false;
                enumValues: undefined;
                baseColumn: never;
                identity: undefined;
                generated: undefined;
            }, {}, {}>;
            name: import("drizzle-orm/pg-core").PgColumn<{
                name: "name";
                tableName: "company_locations";
                dataType: "string";
                columnType: "PgVarchar";
                data: string;
                driverParam: string;
                notNull: true;
                hasDefault: false;
                isPrimaryKey: false;
                isAutoincrement: false;
                hasRuntimeDefault: false;
                enumValues: [string, ...string[]];
                baseColumn: never;
                identity: undefined;
                generated: undefined;
            }, {}, {
                length: 255;
            }>;
            street: import("drizzle-orm/pg-core").PgColumn<{
                name: "street";
                tableName: "company_locations";
                dataType: "string";
                columnType: "PgVarchar";
                data: string;
                driverParam: string;
                notNull: false;
                hasDefault: false;
                isPrimaryKey: false;
                isAutoincrement: false;
                hasRuntimeDefault: false;
                enumValues: [string, ...string[]];
                baseColumn: never;
                identity: undefined;
                generated: undefined;
            }, {}, {
                length: 255;
            }>;
            city: import("drizzle-orm/pg-core").PgColumn<{
                name: "city";
                tableName: "company_locations";
                dataType: "string";
                columnType: "PgVarchar";
                data: string;
                driverParam: string;
                notNull: false;
                hasDefault: false;
                isPrimaryKey: false;
                isAutoincrement: false;
                hasRuntimeDefault: false;
                enumValues: [string, ...string[]];
                baseColumn: never;
                identity: undefined;
                generated: undefined;
            }, {}, {
                length: 100;
            }>;
            state: import("drizzle-orm/pg-core").PgColumn<{
                name: "state";
                tableName: "company_locations";
                dataType: "string";
                columnType: "PgVarchar";
                data: string;
                driverParam: string;
                notNull: false;
                hasDefault: false;
                isPrimaryKey: false;
                isAutoincrement: false;
                hasRuntimeDefault: false;
                enumValues: [string, ...string[]];
                baseColumn: never;
                identity: undefined;
                generated: undefined;
            }, {}, {
                length: 100;
            }>;
            country: import("drizzle-orm/pg-core").PgColumn<{
                name: "country";
                tableName: "company_locations";
                dataType: "string";
                columnType: "PgVarchar";
                data: string;
                driverParam: string;
                notNull: false;
                hasDefault: false;
                isPrimaryKey: false;
                isAutoincrement: false;
                hasRuntimeDefault: false;
                enumValues: [string, ...string[]];
                baseColumn: never;
                identity: undefined;
                generated: undefined;
            }, {}, {
                length: 100;
            }>;
            postalCode: import("drizzle-orm/pg-core").PgColumn<{
                name: "postal_code";
                tableName: "company_locations";
                dataType: "string";
                columnType: "PgVarchar";
                data: string;
                driverParam: string;
                notNull: false;
                hasDefault: false;
                isPrimaryKey: false;
                isAutoincrement: false;
                hasRuntimeDefault: false;
                enumValues: [string, ...string[]];
                baseColumn: never;
                identity: undefined;
                generated: undefined;
            }, {}, {
                length: 20;
            }>;
            timeZone: import("drizzle-orm/pg-core").PgColumn<{
                name: "time_zone";
                tableName: "company_locations";
                dataType: "string";
                columnType: "PgVarchar";
                data: string;
                driverParam: string;
                notNull: false;
                hasDefault: false;
                isPrimaryKey: false;
                isAutoincrement: false;
                hasRuntimeDefault: false;
                enumValues: [string, ...string[]];
                baseColumn: never;
                identity: undefined;
                generated: undefined;
            }, {}, {
                length: 50;
            }>;
            locale: import("drizzle-orm/pg-core").PgColumn<{
                name: "locale";
                tableName: "company_locations";
                dataType: "string";
                columnType: "PgVarchar";
                data: string;
                driverParam: string;
                notNull: true;
                hasDefault: true;
                isPrimaryKey: false;
                isAutoincrement: false;
                hasRuntimeDefault: false;
                enumValues: [string, ...string[]];
                baseColumn: never;
                identity: undefined;
                generated: undefined;
            }, {}, {
                length: 10;
            }>;
            latitude: import("drizzle-orm/pg-core").PgColumn<{
                name: "latitude";
                tableName: "company_locations";
                dataType: "number";
                columnType: "PgDoublePrecision";
                data: number;
                driverParam: string | number;
                notNull: false;
                hasDefault: false;
                isPrimaryKey: false;
                isAutoincrement: false;
                hasRuntimeDefault: false;
                enumValues: undefined;
                baseColumn: never;
                identity: undefined;
                generated: undefined;
            }, {}, {}>;
            longitude: import("drizzle-orm/pg-core").PgColumn<{
                name: "longitude";
                tableName: "company_locations";
                dataType: "number";
                columnType: "PgDoublePrecision";
                data: number;
                driverParam: string | number;
                notNull: false;
                hasDefault: false;
                isPrimaryKey: false;
                isAutoincrement: false;
                hasRuntimeDefault: false;
                enumValues: undefined;
                baseColumn: never;
                identity: undefined;
                generated: undefined;
            }, {}, {}>;
            isActive: import("drizzle-orm/pg-core").PgColumn<{
                name: "is_active";
                tableName: "company_locations";
                dataType: "boolean";
                columnType: "PgBoolean";
                data: boolean;
                driverParam: boolean;
                notNull: false;
                hasDefault: true;
                isPrimaryKey: false;
                isAutoincrement: false;
                hasRuntimeDefault: false;
                enumValues: undefined;
                baseColumn: never;
                identity: undefined;
                generated: undefined;
            }, {}, {}>;
            createdAt: import("drizzle-orm/pg-core").PgColumn<{
                name: "created_at";
                tableName: "company_locations";
                dataType: "date";
                columnType: "PgTimestamp";
                data: Date;
                driverParam: string;
                notNull: true;
                hasDefault: true;
                isPrimaryKey: false;
                isAutoincrement: false;
                hasRuntimeDefault: false;
                enumValues: undefined;
                baseColumn: never;
                identity: undefined;
                generated: undefined;
            }, {}, {}>;
            updatedAt: import("drizzle-orm/pg-core").PgColumn<{
                name: "updated_at";
                tableName: "company_locations";
                dataType: "date";
                columnType: "PgTimestamp";
                data: Date;
                driverParam: string;
                notNull: true;
                hasDefault: true;
                isPrimaryKey: false;
                isAutoincrement: false;
                hasRuntimeDefault: false;
                enumValues: undefined;
                baseColumn: never;
                identity: undefined;
                generated: undefined;
            }, {}, {}>;
        };
        dialect: "pg";
    }>;
    constructor(db: db, audit: AuditService, companySettings: CompanySettingsService);
    checkCompany(companyId: string): Promise<{
        id: string;
        name: string;
        domain: string;
        isActive: boolean;
        country: string;
        currency: "NGN" | "USD" | "EUR" | "GBP";
        regNo: string;
        logo_url: string;
        primaryContactName: string | null;
        primaryContactEmail: string | null;
        primaryContactPhone: string | null;
        subscriptionPlan: "free" | "pro" | "enterprise";
        trialEndsAt: Date | null;
        createdAt: Date;
        updatedAt: Date;
    }>;
    create(dto: CreateLocationDto, user: User, ip: string): Promise<{
        id: string;
        name: string;
        createdAt: Date;
        updatedAt: Date;
        isActive: boolean | null;
        country: string | null;
        companyId: string;
        isPrimary: boolean | null;
        street: string | null;
        city: string | null;
        state: string | null;
        postalCode: string | null;
        timeZone: string | null;
        locale: string;
        latitude: number | null;
        longitude: number | null;
    }[]>;
    findAll(companyId: string): Promise<{
        id: string;
        companyId: string;
        isPrimary: boolean | null;
        name: string;
        street: string | null;
        city: string | null;
        state: string | null;
        country: string | null;
        postalCode: string | null;
        timeZone: string | null;
        locale: string;
        latitude: number | null;
        longitude: number | null;
        isActive: boolean | null;
        createdAt: Date;
        updatedAt: Date;
    }[]>;
    findOne(id: string): Promise<{
        id: string;
        companyId: string;
        isPrimary: boolean | null;
        name: string;
        street: string | null;
        city: string | null;
        state: string | null;
        country: string | null;
        postalCode: string | null;
        timeZone: string | null;
        locale: string;
        latitude: number | null;
        longitude: number | null;
        isActive: boolean | null;
        createdAt: Date;
        updatedAt: Date;
    }>;
    update(locationId: string, dto: UpdateLocationDto, user: User, ip: string): Promise<{
        id: string;
        companyId: string;
        isPrimary: boolean | null;
        name: string;
        street: string | null;
        city: string | null;
        state: string | null;
        country: string | null;
        postalCode: string | null;
        timeZone: string | null;
        locale: string;
        latitude: number | null;
        longitude: number | null;
        isActive: boolean | null;
        createdAt: Date;
        updatedAt: Date;
    }>;
    softDelete(id: string): Promise<{
        id: string;
        companyId: string;
        isPrimary: boolean | null;
        name: string;
        street: string | null;
        city: string | null;
        state: string | null;
        country: string | null;
        postalCode: string | null;
        timeZone: string | null;
        locale: string;
        latitude: number | null;
        longitude: number | null;
        isActive: boolean | null;
        createdAt: Date;
        updatedAt: Date;
    }>;
    getLocationManagers(locationId: string): Promise<{}>;
    addLocationManager(locationId: string, managerId: string): Promise<{}>;
    removeLocationManager(locationId: string, managerId: string): Promise<{}>;
}
