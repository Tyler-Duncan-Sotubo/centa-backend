import { CreateAssetDto } from './dto/create-asset.dto';
import { UpdateAssetDto } from './dto/update-asset.dto';
import { UsefulLifeService } from './useful-life.service';
import { User } from 'src/common/types/user.type';
import { db } from 'src/drizzle/types/drizzle';
import { AuditService } from '../audit/audit.service';
export declare class AssetsService {
    private readonly usefulLifeService;
    private readonly db;
    private readonly auditService;
    constructor(usefulLifeService: UsefulLifeService, db: db, auditService: AuditService);
    private categoryMap;
    create(dto: CreateAssetDto, user: User): Promise<{
        id: string;
        name: string;
        createdAt: string | null;
        updatedAt: string | null;
        companyId: string;
        locationId: string;
        isDeleted: boolean | null;
        category: string;
        employeeId: string | null;
        status: string;
        internalId: string;
        modelName: string | null;
        color: string | null;
        specs: string | null;
        manufacturer: string | null;
        serialNumber: string;
        purchasePrice: string;
        purchaseDate: string;
        depreciationMethod: string | null;
        warrantyExpiry: string | null;
        lendDate: string | null;
        returnDate: string | null;
        usefulLifeYears: number;
    }>;
    bulkCreateAssets(companyId: string, rows: any[]): Promise<{
        id: string;
        name: string;
        createdAt: string | null;
        updatedAt: string | null;
        companyId: string;
        locationId: string;
        isDeleted: boolean | null;
        category: string;
        employeeId: string | null;
        status: string;
        internalId: string;
        modelName: string | null;
        color: string | null;
        specs: string | null;
        manufacturer: string | null;
        serialNumber: string;
        purchasePrice: string;
        purchaseDate: string;
        depreciationMethod: string | null;
        warrantyExpiry: string | null;
        lendDate: string | null;
        returnDate: string | null;
        usefulLifeYears: number;
    }[]>;
    findAll(companyId: string): Promise<({
        id: string;
        name: string;
        modelName: string | null;
        color: string | null;
        specs: string | null;
        category: string;
        manufacturer: string | null;
        serialNumber: string;
        purchasePrice: string;
        purchaseDate: string;
        depreciationMethod: string | null;
        usefulLifeYears: number;
        lendDate: string | null;
        returnDate: string | null;
        warrantyExpiry: string | null;
        employeeId: string | null;
        locationId: string;
        assignedTo: string;
        assignedEmail: any;
        location: string;
        status: string;
        internalId: string;
    } | {
        id: string;
        name: string;
        modelName: string | null;
        color: string | null;
        specs: string | null;
        category: string;
        manufacturer: string | null;
        serialNumber: string;
        purchasePrice: string;
        purchaseDate: string;
        depreciationMethod: string | null;
        usefulLifeYears: number;
        lendDate: string | null;
        returnDate: string | null;
        warrantyExpiry: string | null;
        employeeId: string | null;
        locationId: string;
        assignedTo: string;
        assignedEmail: any;
        location: string;
        status: string;
        internalId: string;
    })[]>;
    findOne(id: string): Promise<{
        id: string;
        internalId: string;
        name: string;
        modelName: string | null;
        color: string | null;
        specs: string | null;
        category: string;
        manufacturer: string | null;
        serialNumber: string;
        purchasePrice: string;
        purchaseDate: string;
        depreciationMethod: string | null;
        warrantyExpiry: string | null;
        lendDate: string | null;
        returnDate: string | null;
        usefulLifeYears: number;
        companyId: string;
        employeeId: string | null;
        locationId: string;
        status: string;
        createdAt: string | null;
        updatedAt: string | null;
        isDeleted: boolean | null;
    }>;
    findByEmployeeId(employeeId: string): Promise<({
        id: string;
        name: string;
        modelName: string | null;
        category: string;
        serialNumber: string;
        lendDate: string | null;
        location: string;
        status: string;
        internalId: string;
        hasReport: boolean;
    } | {
        id: string;
        name: string;
        modelName: string | null;
        category: string;
        serialNumber: string;
        lendDate: string | null;
        location: string;
        status: string;
        internalId: string;
        hasReport: boolean;
    })[]>;
    update(id: string, updateAssetDto: UpdateAssetDto, user: User): Promise<{
        id: string;
        internalId: string;
        name: string;
        modelName: string | null;
        color: string | null;
        specs: string | null;
        category: string;
        manufacturer: string | null;
        serialNumber: string;
        purchasePrice: string;
        purchaseDate: string;
        depreciationMethod: string | null;
        warrantyExpiry: string | null;
        lendDate: string | null;
        returnDate: string | null;
        usefulLifeYears: number;
        companyId: string;
        employeeId: string | null;
        locationId: string;
        status: string;
        createdAt: string | null;
        updatedAt: string | null;
        isDeleted: boolean | null;
    }>;
    requestReturn(id: string): Promise<void>;
    changeStatus(id: string, status: string, user: User): Promise<{
        id: string;
        internalId: string;
        name: string;
        modelName: string | null;
        color: string | null;
        specs: string | null;
        category: string;
        manufacturer: string | null;
        serialNumber: string;
        purchasePrice: string;
        purchaseDate: string;
        depreciationMethod: string | null;
        warrantyExpiry: string | null;
        lendDate: string | null;
        returnDate: string | null;
        usefulLifeYears: number;
        companyId: string;
        employeeId: string | null;
        locationId: string;
        status: string;
        createdAt: string | null;
        updatedAt: string | null;
        isDeleted: boolean | null;
    }>;
    remove(id: string, user: User): Promise<{
        message: string;
    }>;
    private shouldAssignToEmployee;
}
