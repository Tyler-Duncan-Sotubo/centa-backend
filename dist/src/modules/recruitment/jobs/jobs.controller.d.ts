import { JobsService } from './jobs.service';
import { CreateJobDto } from './dto/create-job.dto';
import { UpdateJobDto } from './dto/update-job.dto';
import { BaseController } from 'src/common/interceptor/base.controller';
import { User } from 'src/common/types/user.type';
import { ApplicationFormService } from './applicationForm.service';
import { ConfigDto } from './dto/config.dto';
import { PublicJobsDto } from './dto/public-jobs.dto';
import { CompanyJobsDto } from './dto/company-job.dto';
export declare class JobsController extends BaseController {
    private readonly jobsService;
    private readonly applicationFormService;
    constructor(jobsService: JobsService, applicationFormService: ApplicationFormService);
    create(createJobDto: CreateJobDto, user: User): Promise<{
        id: string;
        createdAt: Date | null;
        updatedAt: Date | null;
        country: string | null;
        currency: string;
        companyId: string;
        description: string | null;
        title: string;
        city: string | null;
        state: string | null;
        status: "draft" | "open" | "closed" | "archived";
        createdBy: string;
        externalJobId: string | null;
        jobType: "onsite" | "remote" | "hybrid";
        employmentType: "permanent" | "temporary" | "contract" | "internship" | "freelance" | "part_time" | "full_time";
        responsibilities: string[] | null;
        requirements: string[] | null;
        experienceLevel: string | null;
        yearsOfExperience: string | null;
        qualification: string | null;
        salaryRangeFrom: number | null;
        salaryRangeTo: number | null;
        benefits: string[] | null;
        postedAt: Date | null;
        closedAt: Date | null;
        deadlineDate: string | null;
        isArchived: boolean;
    }>;
    postJob(id: string, user: User): Promise<void>;
    findAll(user: User): Promise<{
        id: string;
        title: string;
        description: string | null;
        status: "draft" | "open" | "closed" | "archived";
        jobType: "onsite" | "remote" | "hybrid";
        employmentType: "permanent" | "temporary" | "contract" | "internship" | "freelance" | "part_time" | "full_time";
        deadlineDate: string | null;
    }[]>;
    findOne(id: string, user: User): Promise<{
        id: string;
        companyId: string;
        createdBy: string;
        externalJobId: string | null;
        title: string;
        country: string | null;
        state: string | null;
        city: string | null;
        jobType: "onsite" | "remote" | "hybrid";
        employmentType: "permanent" | "temporary" | "contract" | "internship" | "freelance" | "part_time" | "full_time";
        responsibilities: string[] | null;
        requirements: string[] | null;
        experienceLevel: string | null;
        yearsOfExperience: string | null;
        qualification: string | null;
        salaryRangeFrom: number | null;
        salaryRangeTo: number | null;
        benefits: string[] | null;
        currency: string;
        description: string | null;
        status: "draft" | "open" | "closed" | "archived";
        postedAt: Date | null;
        closedAt: Date | null;
        createdAt: Date | null;
        updatedAt: Date | null;
        deadlineDate: string | null;
        isArchived: boolean;
    }>;
    update(id: string, updateJobDto: UpdateJobDto, user: User): Promise<{
        id: string;
        companyId: string;
        createdBy: string;
        externalJobId: string | null;
        title: string;
        country: string | null;
        state: string | null;
        city: string | null;
        jobType: "onsite" | "remote" | "hybrid";
        employmentType: "permanent" | "temporary" | "contract" | "internship" | "freelance" | "part_time" | "full_time";
        responsibilities: string[] | null;
        requirements: string[] | null;
        experienceLevel: string | null;
        yearsOfExperience: string | null;
        qualification: string | null;
        salaryRangeFrom: number | null;
        salaryRangeTo: number | null;
        benefits: string[] | null;
        currency: string;
        description: string | null;
        status: "draft" | "open" | "closed" | "archived";
        postedAt: Date | null;
        closedAt: Date | null;
        createdAt: Date | null;
        updatedAt: Date | null;
        deadlineDate: string | null;
        isArchived: boolean;
    }>;
    remove(id: string, user: User): Promise<{
        message: string;
    }>;
    upsertApplicationForm(jobId: string, config: ConfigDto, user: User): Promise<{
        formId: string;
    }>;
    getApplicationForm(jobId: string): Promise<{
        style: "resume_only" | "form_only" | "both";
        includeReferences: boolean | null;
        fields: {
            id: string;
            formId: string;
            section: string;
            isVisible: boolean | null;
            isEditable: boolean | null;
            label: string;
            fieldType: string;
            required: boolean | null;
            order: number;
        }[];
        questions: {
            id: string;
            formId: string;
            question: string;
            type: string;
            required: boolean | null;
            order: number;
            companyId: string;
        }[];
    }>;
    getApplicationFields(): Promise<{
        id: string;
        section: string;
        label: string;
        fieldType: string;
        isGlobal: boolean | null;
    }[]>;
    findPublicJobs(filters: PublicJobsDto): Promise<{
        id: string;
        title: string;
        description: string | null;
        status: "draft" | "open" | "closed" | "archived";
        jobType: "onsite" | "remote" | "hybrid";
        employmentType: "permanent" | "temporary" | "contract" | "internship" | "freelance" | "part_time" | "full_time";
        deadlineDate: string | null;
        createdAt: Date | null;
        salaryRangeFrom: number | null;
        salaryRangeTo: number | null;
        experiences: string | null;
        location: string | null;
        companyName: string;
        companyLogo: string;
        companyId: string;
    }[]>;
    publicJob(id: string): Promise<{
        id: string;
        companyId: string;
        createdBy: string;
        externalJobId: string | null;
        title: string;
        country: string | null;
        state: string | null;
        city: string | null;
        jobType: "onsite" | "remote" | "hybrid";
        employmentType: "permanent" | "temporary" | "contract" | "internship" | "freelance" | "part_time" | "full_time";
        responsibilities: string[] | null;
        requirements: string[] | null;
        experienceLevel: string | null;
        yearsOfExperience: string | null;
        qualification: string | null;
        salaryRangeFrom: number | null;
        salaryRangeTo: number | null;
        benefits: string[] | null;
        currency: string;
        description: string | null;
        status: "draft" | "open" | "closed" | "archived";
        postedAt: Date | null;
        closedAt: Date | null;
        createdAt: Date | null;
        updatedAt: Date | null;
        deadlineDate: string | null;
        isArchived: boolean;
    }>;
    findCompanyJobs(query: CompanyJobsDto): Promise<{
        id: string;
        title: string;
        description: string | null;
        status: "draft" | "open" | "closed" | "archived";
        jobType: "onsite" | "remote" | "hybrid";
        employmentType: "permanent" | "temporary" | "contract" | "internship" | "freelance" | "part_time" | "full_time";
        deadlineDate: string | null;
        createdAt: Date | null;
        salaryRangeFrom: number | null;
        salaryRangeTo: number | null;
        experiences: string | null;
        location: string | null;
        companyName: string;
        companyLogo: string;
    }[]>;
}
