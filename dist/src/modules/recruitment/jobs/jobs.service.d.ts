import { db } from 'src/drizzle/types/drizzle';
import { CreateJobDto } from './dto/create-job.dto';
import { UpdateJobDto } from './dto/update-job.dto';
import { PipelineSeederService } from '../pipeline/pipeline-seeder.service';
import { User } from 'src/common/types/user.type';
import { AuditService } from 'src/modules/audit/audit.service';
import { PublicJobsDto } from './dto/public-jobs.dto';
import { CompanyJobsDto } from './dto/company-job.dto';
export declare class JobsService {
    private readonly db;
    private readonly pipelineSeederService;
    private readonly auditService;
    constructor(db: db, pipelineSeederService: PipelineSeederService, auditService: AuditService);
    create(createDto: CreateJobDto & {
        pipelineTemplateId?: string;
    }, user: User): Promise<{
        id: string;
        country: string | null;
        currency: string;
        createdAt: Date | null;
        updatedAt: Date | null;
        companyId: string;
        createdBy: string;
        externalJobId: string | null;
        title: string;
        state: string | null;
        city: string | null;
        jobType: "onsite" | "remote" | "hybrid";
        employmentType: "permanent" | "temporary" | "contract" | "internship" | "freelance" | "part_time" | "full_time";
        responsibilities: string[] | null;
        requirements: string[] | null;
        experienceLevel: string | null;
        yearsOfExperience: string | null;
        qualification: string | null;
        salaryRangeFrom: number | null;
        salaryRangeTo: number | null;
        benefits: string[] | null;
        description: string | null;
        status: "draft" | "open" | "closed" | "archived";
        postedAt: Date | null;
        closedAt: Date | null;
        deadlineDate: string | null;
        isArchived: boolean;
    }>;
    postJob(jobId: string, user: User): Promise<void>;
    findAll(companyId: string): Promise<{
        id: string;
        title: string;
        description: string | null;
        status: "draft" | "open" | "closed" | "archived";
        jobType: "onsite" | "remote" | "hybrid";
        employmentType: "permanent" | "temporary" | "contract" | "internship" | "freelance" | "part_time" | "full_time";
        deadlineDate: string | null;
    }[]>;
    findOne(jobId: string, companyId: string): Promise<{
        id: string;
        companyId: string;
        createdBy: string;
        externalJobId: string | null;
        title: string;
        country: string | null;
        state: string | null;
        city: string | null;
        jobType: "onsite" | "remote" | "hybrid";
        employmentType: "permanent" | "temporary" | "contract" | "internship" | "freelance" | "part_time" | "full_time";
        responsibilities: string[] | null;
        requirements: string[] | null;
        experienceLevel: string | null;
        yearsOfExperience: string | null;
        qualification: string | null;
        salaryRangeFrom: number | null;
        salaryRangeTo: number | null;
        benefits: string[] | null;
        currency: string;
        description: string | null;
        status: "draft" | "open" | "closed" | "archived";
        postedAt: Date | null;
        closedAt: Date | null;
        createdAt: Date | null;
        updatedAt: Date | null;
        deadlineDate: string | null;
        isArchived: boolean;
    }>;
    update(jobId: string, user: User, dto: UpdateJobDto): Promise<{
        id: string;
        companyId: string;
        createdBy: string;
        externalJobId: string | null;
        title: string;
        country: string | null;
        state: string | null;
        city: string | null;
        jobType: "onsite" | "remote" | "hybrid";
        employmentType: "permanent" | "temporary" | "contract" | "internship" | "freelance" | "part_time" | "full_time";
        responsibilities: string[] | null;
        requirements: string[] | null;
        experienceLevel: string | null;
        yearsOfExperience: string | null;
        qualification: string | null;
        salaryRangeFrom: number | null;
        salaryRangeTo: number | null;
        benefits: string[] | null;
        currency: string;
        description: string | null;
        status: "draft" | "open" | "closed" | "archived";
        postedAt: Date | null;
        closedAt: Date | null;
        createdAt: Date | null;
        updatedAt: Date | null;
        deadlineDate: string | null;
        isArchived: boolean;
    }>;
    remove(jobId: string, user: User): Promise<{
        message: string;
    }>;
    publicJobs(options: PublicJobsDto): Promise<{
        id: string;
        title: string;
        description: string | null;
        status: "draft" | "open" | "closed" | "archived";
        jobType: "onsite" | "remote" | "hybrid";
        employmentType: "permanent" | "temporary" | "contract" | "internship" | "freelance" | "part_time" | "full_time";
        deadlineDate: string | null;
        createdAt: Date | null;
        salaryRangeFrom: number | null;
        salaryRangeTo: number | null;
        experiences: string | null;
        location: string | null;
        companyName: string;
        companyLogo: string;
        companyId: string;
    }[]>;
    publicJob(jobId: string): Promise<{
        id: string;
        companyId: string;
        createdBy: string;
        externalJobId: string | null;
        title: string;
        country: string | null;
        state: string | null;
        city: string | null;
        jobType: "onsite" | "remote" | "hybrid";
        employmentType: "permanent" | "temporary" | "contract" | "internship" | "freelance" | "part_time" | "full_time";
        responsibilities: string[] | null;
        requirements: string[] | null;
        experienceLevel: string | null;
        yearsOfExperience: string | null;
        qualification: string | null;
        salaryRangeFrom: number | null;
        salaryRangeTo: number | null;
        benefits: string[] | null;
        currency: string;
        description: string | null;
        status: "draft" | "open" | "closed" | "archived";
        postedAt: Date | null;
        closedAt: Date | null;
        createdAt: Date | null;
        updatedAt: Date | null;
        deadlineDate: string | null;
        isArchived: boolean;
    }>;
    publicCompanyJobs(options: CompanyJobsDto): Promise<{
        id: string;
        title: string;
        description: string | null;
        status: "draft" | "open" | "closed" | "archived";
        jobType: "onsite" | "remote" | "hybrid";
        employmentType: "permanent" | "temporary" | "contract" | "internship" | "freelance" | "part_time" | "full_time";
        deadlineDate: string | null;
        createdAt: Date | null;
        salaryRangeFrom: number | null;
        salaryRangeTo: number | null;
        experiences: string | null;
        location: string | null;
        companyName: string;
        companyLogo: string;
    }[]>;
}
