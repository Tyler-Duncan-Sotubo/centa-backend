import { db } from 'src/drizzle/types/drizzle';
import { LeavePolicyService } from '../policy/leave-policy.service';
import { LeaveSettingsService } from '../settings/leave-settings.service';
import { CreateLeaveRequestDto } from './dto/create-leave-request.dto';
import { User } from 'src/common/types/user.type';
import { EmployeesService } from 'src/modules/core/employees/employees.service';
import { AuditService } from 'src/modules/audit/audit.service';
import { HolidaysService } from 'src/modules/leave/holidays/holidays.service';
import { LeaveBalanceService } from '../balance/leave-balance.service';
import { BlockedDaysService } from '../blocked-days/blocked-days.service';
import { ReservedDaysService } from '../reserved-days/reserved-days.service';
import { CacheService } from 'src/common/cache/cache.service';
export declare class LeaveRequestService {
    private readonly db;
    private readonly leavePolicyService;
    private readonly leaveSettingsService;
    private readonly leaveBalanceService;
    private readonly employeesService;
    private readonly auditService;
    private readonly holidayService;
    private readonly blockedDaysService;
    private readonly reservedDaysService;
    private readonly cache;
    constructor(db: db, leavePolicyService: LeavePolicyService, leaveSettingsService: LeaveSettingsService, leaveBalanceService: LeaveBalanceService, employeesService: EmployeesService, auditService: AuditService, holidayService: HolidaysService, blockedDaysService: BlockedDaysService, reservedDaysService: ReservedDaysService, cache: CacheService);
    private tags;
    applyForLeave(dto: CreateLeaveRequestDto, user: User, ip: string): Promise<{
        id: string;
        createdAt: Date | null;
        updatedAt: Date | null;
        companyId: string;
        startDate: string;
        endDate: string;
        status: string;
        employeeId: string;
        reason: string | null;
        rejectionReason: string | null;
        requestedAt: Date | null;
        approvedAt: Date | null;
        leaveTypeId: string;
        totalDays: string;
        approverId: string | null;
        approvalChain: unknown;
        currentApprovalIndex: number | null;
        approvalHistory: unknown;
        partialDay: string | null;
    }>;
    private determineApproverByRole;
    private leaveIsSplit;
    private isEnoughNotice;
    private calculateDurationInDays;
    private listDatesBetween;
    private calculateEffectiveLeaveDays;
    findAll(companyId: string): Promise<({
        employeeId: string;
        requestId: string;
        employeeName: string;
        leaveType: string;
        startDate: string;
        endDate: string;
        status: string;
        reason: string | null;
        department: any;
        jobRole: string | null;
        totalDays: string;
    } | {
        employeeId: string;
        requestId: string;
        employeeName: string;
        leaveType: string;
        startDate: string;
        endDate: string;
        status: string;
        reason: string | null;
        department: any;
        jobRole: string | null;
        totalDays: string;
    } | {
        employeeId: string;
        requestId: string;
        employeeName: string;
        leaveType: string;
        startDate: string;
        endDate: string;
        status: string;
        reason: string | null;
        department: any;
        jobRole: string | null;
        totalDays: string;
    } | {
        employeeId: string;
        requestId: string;
        employeeName: string;
        leaveType: string;
        startDate: string;
        endDate: string;
        status: string;
        reason: string | null;
        department: any;
        jobRole: string | null;
        totalDays: string;
    })[]>;
    findAllByEmployeeId(employeeId: string, companyId: string): Promise<{
        requestId: string;
        employeeId: string;
        leaveType: string;
        startDate: string;
        endDate: string;
        status: string;
        reason: string | null;
    }[]>;
    findOneById(leaveRequestId: string, companyId: string): Promise<{
        requestId: string;
        status: string;
    }>;
}
