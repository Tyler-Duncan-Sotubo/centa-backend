import { AuditService } from 'src/modules/audit/audit.service';
import { db } from 'src/drizzle/types/drizzle';
import { User } from 'src/common/types/user.type';
import { CreateLeavePolicyDto } from './dto/create-leave-policy.dto';
import { UpdateLeavePolicyDto } from './dto/update-leave-policy.dto';
export declare class LeavePolicyService {
    private readonly auditService;
    private readonly db;
    protected readonly table: import("drizzle-orm/pg-core").PgTableWithColumns<{
        name: "leave_policies";
        schema: undefined;
        columns: {
            id: import("drizzle-orm/pg-core").PgColumn<{
                name: "id";
                tableName: "leave_policies";
                dataType: "string";
                columnType: "PgUUID";
                data: string;
                driverParam: string;
                notNull: true;
                hasDefault: true;
                isPrimaryKey: true;
                isAutoincrement: false;
                hasRuntimeDefault: false;
                enumValues: undefined;
                baseColumn: never;
                identity: undefined;
                generated: undefined;
            }, {}, {}>;
            companyId: import("drizzle-orm/pg-core").PgColumn<{
                name: "company_id";
                tableName: "leave_policies";
                dataType: "string";
                columnType: "PgUUID";
                data: string;
                driverParam: string;
                notNull: true;
                hasDefault: false;
                isPrimaryKey: false;
                isAutoincrement: false;
                hasRuntimeDefault: false;
                enumValues: undefined;
                baseColumn: never;
                identity: undefined;
                generated: undefined;
            }, {}, {}>;
            leaveTypeId: import("drizzle-orm/pg-core").PgColumn<{
                name: "leave_type_id";
                tableName: "leave_policies";
                dataType: "string";
                columnType: "PgUUID";
                data: string;
                driverParam: string;
                notNull: true;
                hasDefault: false;
                isPrimaryKey: false;
                isAutoincrement: false;
                hasRuntimeDefault: false;
                enumValues: undefined;
                baseColumn: never;
                identity: undefined;
                generated: undefined;
            }, {}, {}>;
            accrualEnabled: import("drizzle-orm/pg-core").PgColumn<{
                name: "accrual_enabled";
                tableName: "leave_policies";
                dataType: "boolean";
                columnType: "PgBoolean";
                data: boolean;
                driverParam: boolean;
                notNull: false;
                hasDefault: true;
                isPrimaryKey: false;
                isAutoincrement: false;
                hasRuntimeDefault: false;
                enumValues: undefined;
                baseColumn: never;
                identity: undefined;
                generated: undefined;
            }, {}, {}>;
            accrualFrequency: import("drizzle-orm/pg-core").PgColumn<{
                name: "accrual_frequency";
                tableName: "leave_policies";
                dataType: "string";
                columnType: "PgVarchar";
                data: string;
                driverParam: string;
                notNull: false;
                hasDefault: false;
                isPrimaryKey: false;
                isAutoincrement: false;
                hasRuntimeDefault: false;
                enumValues: [string, ...string[]];
                baseColumn: never;
                identity: undefined;
                generated: undefined;
            }, {}, {
                length: 20;
            }>;
            accrualAmount: import("drizzle-orm/pg-core").PgColumn<{
                name: "accrual_amount";
                tableName: "leave_policies";
                dataType: "string";
                columnType: "PgNumeric";
                data: string;
                driverParam: string;
                notNull: false;
                hasDefault: false;
                isPrimaryKey: false;
                isAutoincrement: false;
                hasRuntimeDefault: false;
                enumValues: undefined;
                baseColumn: never;
                identity: undefined;
                generated: undefined;
            }, {}, {}>;
            maxBalance: import("drizzle-orm/pg-core").PgColumn<{
                name: "max_balance";
                tableName: "leave_policies";
                dataType: "number";
                columnType: "PgInteger";
                data: number;
                driverParam: string | number;
                notNull: false;
                hasDefault: false;
                isPrimaryKey: false;
                isAutoincrement: false;
                hasRuntimeDefault: false;
                enumValues: undefined;
                baseColumn: never;
                identity: undefined;
                generated: undefined;
            }, {}, {}>;
            allowCarryover: import("drizzle-orm/pg-core").PgColumn<{
                name: "allow_carryover";
                tableName: "leave_policies";
                dataType: "boolean";
                columnType: "PgBoolean";
                data: boolean;
                driverParam: boolean;
                notNull: false;
                hasDefault: true;
                isPrimaryKey: false;
                isAutoincrement: false;
                hasRuntimeDefault: false;
                enumValues: undefined;
                baseColumn: never;
                identity: undefined;
                generated: undefined;
            }, {}, {}>;
            carryoverLimit: import("drizzle-orm/pg-core").PgColumn<{
                name: "carryover_limit";
                tableName: "leave_policies";
                dataType: "number";
                columnType: "PgInteger";
                data: number;
                driverParam: string | number;
                notNull: false;
                hasDefault: false;
                isPrimaryKey: false;
                isAutoincrement: false;
                hasRuntimeDefault: false;
                enumValues: undefined;
                baseColumn: never;
                identity: undefined;
                generated: undefined;
            }, {}, {}>;
            onlyConfirmedEmployees: import("drizzle-orm/pg-core").PgColumn<{
                name: "only_confirmed_employees";
                tableName: "leave_policies";
                dataType: "boolean";
                columnType: "PgBoolean";
                data: boolean;
                driverParam: boolean;
                notNull: false;
                hasDefault: true;
                isPrimaryKey: false;
                isAutoincrement: false;
                hasRuntimeDefault: false;
                enumValues: undefined;
                baseColumn: never;
                identity: undefined;
                generated: undefined;
            }, {}, {}>;
            genderEligibility: import("drizzle-orm/pg-core").PgColumn<{
                name: "gender_eligibility";
                tableName: "leave_policies";
                dataType: "string";
                columnType: "PgVarchar";
                data: string;
                driverParam: string;
                notNull: false;
                hasDefault: false;
                isPrimaryKey: false;
                isAutoincrement: false;
                hasRuntimeDefault: false;
                enumValues: [string, ...string[]];
                baseColumn: never;
                identity: undefined;
                generated: undefined;
            }, {}, {
                length: 10;
            }>;
            manualEntitlement: import("drizzle-orm/pg-core").PgColumn<{
                name: "manual_entitlement";
                tableName: "leave_policies";
                dataType: "number";
                columnType: "PgInteger";
                data: number;
                driverParam: string | number;
                notNull: false;
                hasDefault: false;
                isPrimaryKey: false;
                isAutoincrement: false;
                hasRuntimeDefault: false;
                enumValues: undefined;
                baseColumn: never;
                identity: undefined;
                generated: undefined;
            }, {}, {}>;
            grantOnStart: import("drizzle-orm/pg-core").PgColumn<{
                name: "grant_on_start";
                tableName: "leave_policies";
                dataType: "boolean";
                columnType: "PgBoolean";
                data: boolean;
                driverParam: boolean;
                notNull: false;
                hasDefault: true;
                isPrimaryKey: false;
                isAutoincrement: false;
                hasRuntimeDefault: false;
                enumValues: undefined;
                baseColumn: never;
                identity: undefined;
                generated: undefined;
            }, {}, {}>;
            eligibilityRules: import("drizzle-orm/pg-core").PgColumn<{
                name: "eligibility_rules";
                tableName: "leave_policies";
                dataType: "json";
                columnType: "PgJsonb";
                data: unknown;
                driverParam: unknown;
                notNull: false;
                hasDefault: false;
                isPrimaryKey: false;
                isAutoincrement: false;
                hasRuntimeDefault: false;
                enumValues: undefined;
                baseColumn: never;
                identity: undefined;
                generated: undefined;
            }, {}, {}>;
            isSplittable: import("drizzle-orm/pg-core").PgColumn<{
                name: "is_splittable";
                tableName: "leave_policies";
                dataType: "boolean";
                columnType: "PgBoolean";
                data: boolean;
                driverParam: boolean;
                notNull: false;
                hasDefault: true;
                isPrimaryKey: false;
                isAutoincrement: false;
                hasRuntimeDefault: false;
                enumValues: undefined;
                baseColumn: never;
                identity: undefined;
                generated: undefined;
            }, {}, {}>;
            createdAt: import("drizzle-orm/pg-core").PgColumn<{
                name: "created_at";
                tableName: "leave_policies";
                dataType: "date";
                columnType: "PgTimestamp";
                data: Date;
                driverParam: string;
                notNull: false;
                hasDefault: true;
                isPrimaryKey: false;
                isAutoincrement: false;
                hasRuntimeDefault: false;
                enumValues: undefined;
                baseColumn: never;
                identity: undefined;
                generated: undefined;
            }, {}, {}>;
            updatedAt: import("drizzle-orm/pg-core").PgColumn<{
                name: "updated_at";
                tableName: "leave_policies";
                dataType: "date";
                columnType: "PgTimestamp";
                data: Date;
                driverParam: string;
                notNull: false;
                hasDefault: true;
                isPrimaryKey: false;
                isAutoincrement: false;
                hasRuntimeDefault: false;
                enumValues: undefined;
                baseColumn: never;
                identity: undefined;
                generated: undefined;
            }, {}, {}>;
        };
        dialect: "pg";
    }>;
    constructor(auditService: AuditService, db: db);
    bulkCreateLeavePolicies(companyId: string, rows: any[]): Promise<{
        id: string;
        createdAt: Date | null;
        updatedAt: Date | null;
        companyId: string;
        leaveTypeId: string;
        accrualEnabled: boolean | null;
        accrualFrequency: string | null;
        accrualAmount: string | null;
        maxBalance: number | null;
        allowCarryover: boolean | null;
        carryoverLimit: number | null;
        onlyConfirmedEmployees: boolean | null;
        genderEligibility: string | null;
        manualEntitlement: number | null;
        grantOnStart: boolean | null;
        eligibilityRules: unknown;
        isSplittable: boolean | null;
    }[]>;
    create(leaveTypeId: string, dto: CreateLeavePolicyDto, user: User, ip: string): Promise<{
        id: string;
        createdAt: Date | null;
        updatedAt: Date | null;
        companyId: string;
        leaveTypeId: string;
        accrualEnabled: boolean | null;
        accrualFrequency: string | null;
        accrualAmount: string | null;
        maxBalance: number | null;
        allowCarryover: boolean | null;
        carryoverLimit: number | null;
        onlyConfirmedEmployees: boolean | null;
        genderEligibility: string | null;
        manualEntitlement: number | null;
        grantOnStart: boolean | null;
        eligibilityRules: unknown;
        isSplittable: boolean | null;
    }>;
    findAll(companyId: string): Promise<{
        id: string;
        leaveTypeId: string;
        accrualEnabled: boolean | null;
        accrualFrequency: string | null;
        accrualAmount: string | null;
        maxBalance: number | null;
        allowCarryover: boolean | null;
        carryoverLimit: number | null;
        onlyConfirmedEmployees: boolean | null;
        eligibilityRules: unknown;
        genderEligibility: string | null;
        isSplittable: boolean | null;
        leaveTypeName: string;
    }[]>;
    findLeavePoliciesByLeaveTypeId(companyId: string, leaveTypeId: string): Promise<{
        id: string;
        companyId: string;
        leaveTypeId: string;
        accrualEnabled: boolean | null;
        accrualFrequency: string | null;
        accrualAmount: string | null;
        maxBalance: number | null;
        allowCarryover: boolean | null;
        carryoverLimit: number | null;
        onlyConfirmedEmployees: boolean | null;
        genderEligibility: string | null;
        manualEntitlement: number | null;
        grantOnStart: boolean | null;
        eligibilityRules: unknown;
        isSplittable: boolean | null;
        createdAt: Date | null;
        updatedAt: Date | null;
    }>;
    findOne(companyId: string, leavePolicyId: string): Promise<{
        id: string;
        companyId: string;
        leaveTypeId: string;
        accrualEnabled: boolean | null;
        accrualFrequency: string | null;
        accrualAmount: string | null;
        maxBalance: number | null;
        allowCarryover: boolean | null;
        carryoverLimit: number | null;
        onlyConfirmedEmployees: boolean | null;
        genderEligibility: string | null;
        manualEntitlement: number | null;
        grantOnStart: boolean | null;
        eligibilityRules: unknown;
        isSplittable: boolean | null;
        createdAt: Date | null;
        updatedAt: Date | null;
    }>;
    findAllAccrualPolicies(): Promise<{
        id: string;
        companyId: string;
        leaveTypeId: string;
        accrualEnabled: boolean | null;
        accrualFrequency: string | null;
        accrualAmount: string | null;
        maxBalance: number | null;
        allowCarryover: boolean | null;
        carryoverLimit: number | null;
        onlyConfirmedEmployees: boolean | null;
        genderEligibility: string | null;
        manualEntitlement: number | null;
        grantOnStart: boolean | null;
        eligibilityRules: unknown;
        isSplittable: boolean | null;
        createdAt: Date | null;
        updatedAt: Date | null;
    }[]>;
    findAllNonAccrualPolicies(): Promise<{
        id: string;
        companyId: string;
        leaveTypeId: string;
        accrualEnabled: boolean | null;
        accrualFrequency: string | null;
        accrualAmount: string | null;
        maxBalance: number | null;
        allowCarryover: boolean | null;
        carryoverLimit: number | null;
        onlyConfirmedEmployees: boolean | null;
        genderEligibility: string | null;
        manualEntitlement: number | null;
        grantOnStart: boolean | null;
        eligibilityRules: unknown;
        isSplittable: boolean | null;
        createdAt: Date | null;
        updatedAt: Date | null;
    }[]>;
    update(leavePolicyId: string, dto: UpdateLeavePolicyDto, user: User, ip: string): Promise<{
        id: string;
        companyId: string;
        leaveTypeId: string;
        accrualEnabled: boolean | null;
        accrualFrequency: string | null;
        accrualAmount: string | null;
        maxBalance: number | null;
        allowCarryover: boolean | null;
        carryoverLimit: number | null;
        onlyConfirmedEmployees: boolean | null;
        genderEligibility: string | null;
        manualEntitlement: number | null;
        grantOnStart: boolean | null;
        eligibilityRules: unknown;
        isSplittable: boolean | null;
        createdAt: Date | null;
        updatedAt: Date | null;
    }>;
    remove(leavePolicyId: string, user: User, ip: string): Promise<void>;
}
