import { User } from 'src/common/types/user.type';
import { BaseController } from 'src/common/interceptor/base.controller';
import { CreateLeavePolicyDto } from './dto/create-leave-policy.dto';
import { UpdateLeavePolicyDto } from './dto/update-leave-policy.dto';
import { LeavePolicyService } from './leave-policy.service';
export declare class LeavePolicyController extends BaseController {
    private readonly leavePolicy;
    constructor(leavePolicy: LeavePolicyService);
    createLeavePolicy(leaveTypeId: string, dto: CreateLeavePolicyDto, user: User, ip: string): Promise<{
        id: string;
        createdAt: Date | null;
        updatedAt: Date | null;
        companyId: string;
        leaveTypeId: string;
        accrualEnabled: boolean | null;
        accrualFrequency: string | null;
        accrualAmount: string | null;
        maxBalance: number | null;
        allowCarryover: boolean | null;
        carryoverLimit: number | null;
        onlyConfirmedEmployees: boolean | null;
        genderEligibility: string | null;
        manualEntitlement: number | null;
        grantOnStart: boolean | null;
        eligibilityRules: unknown;
        isSplittable: boolean | null;
    }>;
    bulkCreateLeavePolicies(rows: any[], user: User): Promise<{
        id: string;
        createdAt: Date | null;
        updatedAt: Date | null;
        companyId: string;
        leaveTypeId: string;
        accrualEnabled: boolean | null;
        accrualFrequency: string | null;
        accrualAmount: string | null;
        maxBalance: number | null;
        allowCarryover: boolean | null;
        carryoverLimit: number | null;
        onlyConfirmedEmployees: boolean | null;
        genderEligibility: string | null;
        manualEntitlement: number | null;
        grantOnStart: boolean | null;
        eligibilityRules: unknown;
        isSplittable: boolean | null;
    }[]>;
    findAllLeavePolicies(user: User): Promise<{
        id: string;
        leaveTypeId: string;
        accrualEnabled: boolean | null;
        accrualFrequency: string | null;
        accrualAmount: string | null;
        maxBalance: number | null;
        allowCarryover: boolean | null;
        carryoverLimit: number | null;
        onlyConfirmedEmployees: boolean | null;
        eligibilityRules: unknown;
        genderEligibility: string | null;
        isSplittable: boolean | null;
        leaveTypeName: string;
    }[]>;
    findOneLeavePolicy(leaveTypeId: string, user: User): Promise<{
        id: string;
        companyId: string;
        leaveTypeId: string;
        accrualEnabled: boolean | null;
        accrualFrequency: string | null;
        accrualAmount: string | null;
        maxBalance: number | null;
        allowCarryover: boolean | null;
        carryoverLimit: number | null;
        onlyConfirmedEmployees: boolean | null;
        genderEligibility: string | null;
        manualEntitlement: number | null;
        grantOnStart: boolean | null;
        eligibilityRules: unknown;
        isSplittable: boolean | null;
        createdAt: Date | null;
        updatedAt: Date | null;
    }>;
    updateLeavePolicy(leaveTypeId: string, dto: UpdateLeavePolicyDto, user: User, ip: string): Promise<{
        id: string;
        companyId: string;
        leaveTypeId: string;
        accrualEnabled: boolean | null;
        accrualFrequency: string | null;
        accrualAmount: string | null;
        maxBalance: number | null;
        allowCarryover: boolean | null;
        carryoverLimit: number | null;
        onlyConfirmedEmployees: boolean | null;
        genderEligibility: string | null;
        manualEntitlement: number | null;
        grantOnStart: boolean | null;
        eligibilityRules: unknown;
        isSplittable: boolean | null;
        createdAt: Date | null;
        updatedAt: Date | null;
    }>;
    removeLeavePolicy(leaveTypeId: string, user: User, ip: string): Promise<void>;
}
