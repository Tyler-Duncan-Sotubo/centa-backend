import { db } from 'src/drizzle/types/drizzle';
import { User } from 'src/common/types/user.type';
import { AuditService } from 'src/modules/audit/audit.service';
import { LeaveBalanceService } from '../balance/leave-balance.service';
import { ApproveRejectLeaveDto } from './dto/approve-reject.dto';
import { LeaveSettingsService } from '../settings/leave-settings.service';
import { PusherService } from 'src/modules/notification/services/pusher.service';
export declare class LeaveApprovalService {
    private readonly db;
    private readonly auditService;
    private readonly leaveBalanceService;
    private readonly leaveSettingsService;
    private readonly pusher;
    constructor(db: db, auditService: AuditService, leaveBalanceService: LeaveBalanceService, leaveSettingsService: LeaveSettingsService, pusher: PusherService);
    findOneById(leaveRequestId: string, companyId: string): Promise<{
        id: string;
        companyId: string;
        employeeId: string;
        leaveTypeId: string;
        startDate: string;
        endDate: string;
        reason: string | null;
        status: string;
        totalDays: string;
        approverId: string | null;
        approvedAt: Date | null;
        requestedAt: Date | null;
        rejectionReason: string | null;
        approvalChain: unknown;
        currentApprovalIndex: number | null;
        approvalHistory: unknown;
        partialDay: string | null;
        createdAt: Date | null;
        updatedAt: Date | null;
    }>;
    approveLeaveRequest(leaveRequestId: string, dto: ApproveRejectLeaveDto, user: User, ip: string): Promise<{
        id: string;
        companyId: string;
        employeeId: string;
        leaveTypeId: string;
        startDate: string;
        endDate: string;
        reason: string | null;
        status: string;
        totalDays: string;
        approverId: string | null;
        approvedAt: Date | null;
        requestedAt: Date | null;
        rejectionReason: string | null;
        approvalChain: unknown;
        currentApprovalIndex: number | null;
        approvalHistory: unknown;
        partialDay: string | null;
        createdAt: Date | null;
        updatedAt: Date | null;
    }[]>;
    rejectLeaveRequest(leaveRequestId: string, dto: ApproveRejectLeaveDto, user: User, ip: string): Promise<{
        id: string;
        companyId: string;
        employeeId: string;
        leaveTypeId: string;
        startDate: string;
        endDate: string;
        reason: string | null;
        status: string;
        totalDays: string;
        approverId: string | null;
        approvedAt: Date | null;
        requestedAt: Date | null;
        rejectionReason: string | null;
        approvalChain: unknown;
        currentApprovalIndex: number | null;
        approvalHistory: unknown;
        partialDay: string | null;
        createdAt: Date | null;
        updatedAt: Date | null;
    }[]>;
}
