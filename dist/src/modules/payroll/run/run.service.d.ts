import { db } from 'src/drizzle/types/drizzle';
import { AuditService } from 'src/modules/audit/audit.service';
import { PayrollSettingsService } from '../settings/payroll-settings.service';
import { CompensationService } from 'src/modules/core/employees/compensation/compensation.service';
import { User } from 'src/common/types/user.type';
import { TaxService } from '../tax/tax.service';
import { Queue } from 'bullmq';
import { PayslipService } from '../payslip/payslip.service';
import { SalaryAdvanceService } from '../salary-advance/salary-advance.service';
import { PusherService } from 'src/modules/notification/services/pusher.service';
import { PayrollApprovalEmailService } from 'src/modules/notification/services/payroll-approval.service';
import { ConfigService } from '@nestjs/config';
import { HotQueries } from 'src/drizzle/hot-queries';
export declare class RunService {
    private payrollQueue;
    private readonly db;
    private readonly hot;
    private readonly auditService;
    private readonly payrollSettingsService;
    private readonly compensationService;
    private readonly taxService;
    private readonly payslipService;
    private readonly salaryAdvanceService;
    private readonly pusher;
    private readonly payrollApprovalEmailService;
    private readonly configService;
    constructor(payrollQueue: Queue, db: db, hot: HotQueries, auditService: AuditService, payrollSettingsService: PayrollSettingsService, compensationService: CompensationService, taxService: TaxService, payslipService: PayslipService, salaryAdvanceService: SalaryAdvanceService, pusher: PusherService, payrollApprovalEmailService: PayrollApprovalEmailService, configService: ConfigService);
    private calculatePAYE;
    private percentOf;
    private round2;
    calculatePayroll(employeeId: string, payrollDate: string, payrollRunId: string, companyId: string, userId: string, workflowId: string): Promise<{
        name: string;
        id: string;
        createdAt: Date | null;
        updatedAt: Date | null;
        companyId: string;
        userId: string | null;
        employeeId: string;
        paymentStatus: string | null;
        payrollRunId: string;
        basic: string;
        housing: string;
        transport: string;
        grossSalary: string;
        pensionContribution: string;
        employerPensionContribution: string;
        bonuses: string | null;
        reimbursements: unknown;
        salaryAdvance: string | null;
        nhfContribution: string | null;
        payeTax: string;
        customDeductions: string | null;
        voluntaryDeductions: unknown;
        totalDeductions: string;
        netSalary: string;
        taxableIncome: string;
        payrollDate: string;
        payrollMonth: string;
        paymentDate: string | null;
        paymentReference: string | null;
        approvalDate: string | null;
        approvalRemarks: string | null;
        isStarter: boolean | null;
        isLeaver: boolean | null;
        isOffCycle: boolean | null;
        requestedBy: string;
        requestedAt: Date;
        approvalStatus: string;
        lastApprovalAt: Date | null;
        lastApprovedBy: string | null;
        workflowId: string;
        currentStep: number;
    }>;
    calculatePayrollForCompany(user: User, payrollDate: string, groupId?: string): Promise<{
        payrollRunId: string;
        payrollDate: string;
        employeeCount: number;
        approvalWorkflowId: string;
    }>;
    getPayrollSummaryByRunId(runId: string): Promise<{
        employeeId: string;
        payrollRunId: string;
        payrollDate: string;
        payrollMonth: string;
        name: string;
        isStarter: boolean;
        basic: string;
        housing: string;
        transport: string;
        grossSalary: string;
        netSalary: string;
        bonuses: string | null;
        payeTax: string;
        pensionContribution: string;
        employerPensionContribution: string;
        nhfContribution: string | null;
        totalDeductions: string;
        taxableIncome: string;
        salaryAdvance: string | null;
        reimbursements: {};
        voluntaryDeductions: {};
        approvalStatus: string;
    }[]>;
    findOnePayRun(runId: string): Promise<{
        totalCostOfPayroll: any;
        totalPensionContribution: number;
        totalPAYE: number;
        totalNHFContribution: number;
        payrollRunId: string;
        employees: {
            employeeId: string;
            name: string;
            grossSalary: number;
            netSalary: number;
            approvalStatus: string;
            paymentStatus: string | null;
            payeTax: number;
            pensionContribution: number;
            nhfContribution: number;
            employerPensionContribution: number;
            additionalDeductions: number;
            taxableIncome: number;
            salaryAdvance: number;
            payrollMonth: string;
            payrollRunId: string;
            payrollDate: string;
            bonuses: number;
            voluntaryDeductions: unknown;
            payslip_pdf_url: string | null;
            reimbursements: unknown;
        }[];
    }>;
    sendForApproval(runId: string, actorId: string, remarks?: string): Promise<{
        updatedCount: any;
    }>;
    approvePayrollRun(runId: string, user: User, remarks?: string): Promise<string>;
    checkApprovalStatus(runId: string): Promise<{
        payrollDate: string;
        approvalStatus: string;
        approvalSteps: {
            id: string;
            sequence: number;
            role: string;
            minApprovals: number;
            maxApprovals: number;
            createdAt: Date | null;
            status: string;
        }[];
    }>;
    markAsInProgress(runId: string, user: User): Promise<void>;
    updatePayrollPaymentStatus(user: User, payrollRunId: string, paymentStatus: string): Promise<{
        payrollMonth: string;
        salaryAdvance: string | null;
        employeeId: string;
        expenses: unknown;
    }[]>;
    discardPayrollRun(user: User, payrollRunId: string): Promise<{
        payrollRunId: string;
        deletedEmployees: number;
        payrollDate: string;
        status: string;
    }>;
}
