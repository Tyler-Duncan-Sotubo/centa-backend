import { db } from 'src/drizzle/types/drizzle';
import { Queue } from 'bullmq';
import { createBonusDto } from '../dto';
import { CacheService } from 'src/config/cache/cache.service';
import { LoanService } from './loan.service';
export declare class PayrollService {
    private db;
    private payrollQueue;
    private cache;
    private loanService;
    constructor(db: db, payrollQueue: Queue, cache: CacheService, loanService: LoanService);
    private formattedDate;
    private calculatePAYE;
    calculatePayroll(employee_id: string, payrollMonth: string, payrollRunId: string, company_id: string): Promise<{
        id: string;
        payroll_run_id: string;
        gross_salary: number;
        paye_tax: number;
        pension_contribution: number;
        employer_pension_contribution: number;
        nhf_contribution: number;
        bonuses: number | null;
        net_salary: number;
        taxable_income: number;
        payroll_date: string;
        payroll_month: string;
        custom_deductions: number | null;
        total_deductions: number;
        salary_advance: number | null;
        payment_status: string | null;
        payment_date: string | null;
        payment_reference: string | null;
        approval_status: string | null;
        approval_date: string | null;
        approval_remarks: string | null;
        employee_id: string;
        company_id: string;
    }[]>;
    calculatePayrollForCompany(company_id: string, payrollMonth: string): Promise<{
        id: string;
        payroll_run_id: string;
        gross_salary: number;
        paye_tax: number;
        pension_contribution: number;
        employer_pension_contribution: number;
        nhf_contribution: number;
        bonuses: number | null;
        net_salary: number;
        taxable_income: number;
        payroll_date: string;
        payroll_month: string;
        custom_deductions: number | null;
        total_deductions: number;
        salary_advance: number | null;
        payment_status: string | null;
        payment_date: string | null;
        payment_reference: string | null;
        approval_status: string | null;
        approval_date: string | null;
        approval_remarks: string | null;
        employee_id: string;
        company_id: string;
    }[][]>;
    private getCompany;
    getPayrollSummary(companyId: string): Promise<{
        payroll_run_id: string;
        payroll_date: string;
        payroll_month: string;
        approval_status: string | null;
        payment_status: string | null;
        total_gross_salary: number;
        employee_count: number;
        total_deductions: number;
        total_net_salary: number;
    }[]>;
    getPayrollStatus(companyId: string): Promise<{
        payroll_run_id: string;
    }[]>;
    updatePayrollApprovalStatus(user_id: string, payroll_run_id: string, approval_status: string): Promise<{
        id: string;
        payroll_run_id: string;
        gross_salary: number;
        paye_tax: number;
        pension_contribution: number;
        employer_pension_contribution: number;
        nhf_contribution: number;
        bonuses: number | null;
        net_salary: number;
        taxable_income: number;
        payroll_date: string;
        payroll_month: string;
        custom_deductions: number | null;
        total_deductions: number;
        salary_advance: number | null;
        payment_status: string | null;
        payment_date: string | null;
        payment_reference: string | null;
        approval_status: string | null;
        approval_date: string | null;
        approval_remarks: string | null;
        employee_id: string;
        company_id: string;
    }[]>;
    updatePayrollPaymentStatus(user_id: string, payroll_run_id: string, payment_status: string): Promise<{
        payroll_month: string;
    }[]>;
    deletePayroll(company_id: string, payroll_run_id: string): Promise<any>;
    getSalaryBreakdown(user_id: string): Promise<{
        id: string;
        basic: number;
        housing: number;
        transport: number;
        others: number;
    } | null>;
    createSalaryBreakdown(user_id: string, dto: any): Promise<{
        id: string;
        company_id: string;
        basic: number;
        housing: number;
        transport: number;
        others: number;
    }[]>;
    deleteSalaryBreakdown(user_id: string): Promise<any>;
    createBonus(user_id: string, dto: createBonusDto): Promise<{
        id: string;
        payroll_month: string;
        employee_id: string;
        company_id: string;
        amount: number;
        bonus_type: string | null;
        bonus_date: string;
    }[]>;
    getBonuses(user_id: string): Promise<{
        id: string;
        employee_id: string;
        amount: number;
        bonus_type: string | null;
        first_name: string | null;
        last_name: string | null;
        payroll_month: string;
    }[]>;
    deleteBonus(user_id: string, id: string): Promise<any>;
}
