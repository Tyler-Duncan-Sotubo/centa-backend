import { PayrollService } from './services/payroll.service';
import { createBonusDto, CreateCustomDeduction, UpdateCustomDeductionDto } from './dto';
import { DeductionService } from './services/deduction.service';
import { PayslipService } from './services/payslip.service';
import { Response } from 'express';
import { User } from 'src/types/user.type';
import { BaseController } from 'src/config/base.controller';
import { TaxService } from './services/tax.service';
import { PdfService } from './services/pdf.service';
import { updateTaxConfigurationDto } from './dto/update-tax-config.dto';
export declare class PayrollController extends BaseController {
    private readonly payrollService;
    private readonly deductionService;
    private readonly payslipService;
    private readonly taxService;
    private readonly pdfService;
    constructor(payrollService: PayrollService, deductionService: DeductionService, payslipService: PayslipService, taxService: TaxService, pdfService: PdfService);
    private formattedDate;
    updateTaxConfiguration(user: User, dto: updateTaxConfigurationDto): Promise<any>;
    createCustomDeduction(user: User, dto: CreateCustomDeduction): Promise<any>;
    getCustomDeduction(user: User): Promise<{
        id: string;
        deduction_name: string;
        amount: number;
        first_name: string | null;
        last_name: string | null;
        employee_id: string;
    }[]>;
    updateCustomDeduction(user: User, dto: UpdateCustomDeductionDto, id: string): Promise<any>;
    deleteCustomDeduction(id: string): Promise<any>;
    calculatePayrollForCompany(user: User): Promise<{
        id: string;
        company_id: string;
        employee_id: string;
        payroll_run_id: string;
        gross_salary: number;
        paye_tax: number;
        pension_contribution: number;
        employer_pension_contribution: number;
        nhf_contribution: number;
        bonuses: number | null;
        net_salary: number;
        taxable_income: number;
        payroll_date: string;
        payroll_month: string;
        custom_deductions: number | null;
        total_deductions: number;
        salary_advance: number | null;
        payment_status: string | null;
        payment_date: string | null;
        payment_reference: string | null;
        approval_status: string | null;
        approval_date: string | null;
        approval_remarks: string | null;
    }[][]>;
    getPayrollSummary(user: User): Promise<{
        payroll_run_id: string;
        payroll_date: string;
        payroll_month: string;
        approval_status: string | null;
        payment_status: string | null;
        total_gross_salary: number;
        employee_count: number;
        total_deductions: number;
        total_net_salary: number;
    }[]>;
    getCompanyPayrollStatus(user: User): Promise<{
        payroll_run_id: string;
    }[]>;
    deleteCompanyPayroll(user: User, id: string, status: 'pending' | 'approved' | 'rejected'): Promise<{
        id: string;
        payroll_run_id: string;
        gross_salary: number;
        paye_tax: number;
        pension_contribution: number;
        employer_pension_contribution: number;
        nhf_contribution: number;
        bonuses: number | null;
        net_salary: number;
        taxable_income: number;
        payroll_date: string;
        payroll_month: string;
        custom_deductions: number | null;
        total_deductions: number;
        salary_advance: number | null;
        payment_status: string | null;
        payment_date: string | null;
        payment_reference: string | null;
        approval_status: string | null;
        approval_date: string | null;
        approval_remarks: string | null;
        employee_id: string;
        company_id: string;
    }[]>;
    updatePayrollPaymentStatus(user: User, id: string, status: 'pending' | 'approved' | 'rejected'): Promise<{
        payroll_month: string;
    }[]>;
    deleteCompanyPayrollById(user: User, id: string): Promise<any>;
    getCompanyBonuses(user: User): Promise<{
        id: string;
        employee_id: string;
        amount: number;
        bonus_type: string | null;
        first_name: string | null;
        last_name: string | null;
        payroll_month: string;
    }[]>;
    createCompanyBonus(user: User, dto: createBonusDto): Promise<{
        id: string;
        company_id: string;
        employee_id: string;
        payroll_month: string;
        amount: number;
        bonus_type: string | null;
        bonus_date: string;
    }[]>;
    deleteCompanyBonuses(user: User, id: string): Promise<any>;
    getCompanyPayslips(user: User, id: string): Promise<{
        payslip_id: string;
        payroll_run_id: string;
        gross_salary: number;
        net_salary: number;
        paye_tax: number;
        pension_contribution: number;
        employer_pension_contribution: number;
        nhf_contribution: number;
        additionalDeductions: number | null;
        payroll_month: string;
        first_name: string;
        last_name: string;
        status: string | null;
        payment_status: string | null;
        payment_date: string | null;
        taxable_income: number;
        payslip_pdf_url: string | null;
        salaryAdvance: number | null;
    }[]>;
    downloadPayslipCSV(user: User, id: string, format: "internal" | "bank" | undefined, res: Response): Promise<void>;
    getEmployeePayslipSummary(employeeId: string): Promise<{
        payslip_id: string;
        payroll_month: string;
    }[]>;
    getEmployeePayslip(payslipId: string): Promise<{
        id: string;
        issued_at: string | null;
        status: string | null;
        employer_remarks: string | null;
        gross_salary: number;
        net_salary: number;
        paye_tax: number;
        pdf_url: string | null;
        salaryAdvance: number | null;
        pension_contribution: number;
        nhf_contribution: number;
        payroll_month: string;
        first_name: string;
        last_name: string;
        email: string;
        company_name: string;
        company_address: string | null;
        company_email: string | null;
        company_logo: string | null;
        company_city: string | null;
    }>;
    getSalaryBreakdown(user: User): Promise<{
        id: string;
        basic: number;
        housing: number;
        transport: number;
        others: number;
    } | null>;
    createSalaryBreakdown(user: User, dto: any): Promise<{
        id: string;
        company_id: string;
        basic: number;
        housing: number;
        transport: number;
        others: number;
    }[]>;
    deleteSalaryBreakdown(user: User): Promise<any>;
    getCompanyTaxFilings(user: User): Promise<{
        id: string;
        tax_type: string;
        total_deductions: number;
        status: string | null;
        month: string;
    }[]>;
    updateCompanyTaxFilings(id: string, status: string): Promise<any>;
    downloadExcel(tax_filing_id: string, res: Response): Promise<void>;
}
